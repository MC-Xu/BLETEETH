<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ble_hid_uart_mult_roles.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ble_hid_uart_mult_roles.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 05 09:56:58 2024
<BR><P>
<H3>Maximum Stack Usage =       1072 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ble_sm_sc_public_key_rx &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[24]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BOD_IRQHandler</a><BR>
 <LI><a href="#[297]">abort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[297]">abort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_IRQHandler</a> from nimble_glue_spark.o(.ramfunc) referenced from startup_panseries.o(RESET)
 <LI><a href="#[2b]">BB_DebugReset</a> from bb.o(.ramfunc) referenced from bb.o(i.BB_DebugInit)
 <LI><a href="#[24]">BOD_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[23]">DMA_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1c]">GPIO0_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1d]">GPIO1_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1e]">GPIO2_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1f]">GPIO3_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[28]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[f]">I2C0_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[2f]">LHCI_LlTxFifoAvail</a> from lhci_main.o(i.LHCI_LlTxFifoAvail) referenced from lhci_main.o(i.LHCI_Init)
 <LI><a href="#[2c]">LHCI_MsgHandler</a> from lhci_main.o(i.LHCI_MsgHandler) referenced from lhci_main.o(i.LHCI_Init)
 <LI><a href="#[2e]">LHCI_TxAclHandler</a> from lhci_acl.o(i.LHCI_TxAclHandler) referenced from lhci_main.o(i.LHCI_Init)
 <LI><a href="#[2d]">LHCI_TxEvtHandler</a> from lhci_evt.o(i.LHCI_TxEvtHandler) referenced from lhci_main.o(i.LHCI_Init)
 <LI><a href="#[37]">LL_AdvEvtHandler</a> from ll_adv.o(.ramfunc) referenced from ll_adv.o(i.LL_SlvAdvInit)
 <LI><a href="#[36]">LL_AdvPduHandler</a> from ll_pdu_adv.o(i.LL_AdvPduHandler) referenced from ll_adv.o(i.LL_SlvAdvInit)
 <LI><a href="#[ff]">LL_ChnMapIndHandler</a> from ll_pdu_conn.o(i.LL_ChnMapIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[30]">LL_ConnEvtHandler</a> from ll_conn_comm.o(.ramfunc) referenced from ll_conn.o(i.LL_ConnInit)
 <LI><a href="#[fe]">LL_ConnUpdIndHandler</a> from ll_pdu_conn.o(i.LL_ConnUpdIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[110]">LL_DataLenReqHandler</a> from ll_pdu_conn.o(i.LL_DataLenReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[111]">LL_DataLenRspHandler</a> from ll_pdu_conn.o(i.LL_DataLenRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[101]">LL_EncReqHandler</a> from ll_pdu_conn.o(i.LL_EncReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[102]">LL_EncRspHandler</a> from ll_pdu_conn.o(i.LL_EncRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[106]">LL_FeatReqHandler</a> from ll_pdu_conn.o(i.LL_FeatReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[107]">LL_FeatRspHandler</a> from ll_pdu_conn.o(i.LL_FeatRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[18]">LL_IRQHandler</a> from nimble_glue_spark.o(.ramfunc) referenced from startup_panseries.o(RESET)
 <LI><a href="#[33]">LL_InitiatorPduHandler</a> from ll_pdu_scan.o(.ramfunc) referenced from ll_scan.o(i.LL_MstInitiatorInit)
 <LI><a href="#[31]">LL_MsgHandler</a> from ll_init.o(i.LL_MsgHandler) referenced from ll_init.o(i.LL_Init)
 <LI><a href="#[32]">LL_MstConnEvtHandler</a> from ll_conn_mst.o(.ramfunc) referenced from ll_conn_mst.o(i.LL_MstInit)
 <LI><a href="#[108]">LL_PauseEncReqHandler</a> from ll_pdu_conn.o(i.LL_PauseEncReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[109]">LL_PauseEncRspHandler</a> from ll_pdu_conn.o(i.LL_PauseEncRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[112]">LL_PhyReqHandler</a> from ll_pdu_conn.o(i.LL_PhyReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[113]">LL_PhyRspHandler</a> from ll_pdu_conn.o(i.LL_PhyRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[114]">LL_PhyUpdIndHandler</a> from ll_pdu_conn.o(i.LL_PhyUpdIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[10e]">LL_PingReqHandler</a> from ll_pdu_conn.o(i.LL_PingReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[10f]">LL_PingRspHandler</a> from ll_pdu_conn.o(i.LL_PingRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[10d]">LL_RejectExtIndHandler</a> from ll_pdu_conn.o(i.LL_RejectExtIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[10b]">LL_RejectIndHandler</a> from ll_pdu_conn.o(i.LL_RejectIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[35]">LL_ScanEvtHandler</a> from ll_scan.o(.ramfunc) referenced from ll_scan.o(i.LL_MstScanInit)
 <LI><a href="#[34]">LL_ScanPduHandler</a> from ll_pdu_scan.o(i.LL_ScanPduHandler) referenced from ll_scan.o(i.LL_MstScanInit)
 <LI><a href="#[38]">LL_SlvConnEvtHandler</a> from ll_conn_slv.o(.ramfunc) referenced from ll_conn_slv.o(i.LL_SlvInit)
 <LI><a href="#[10c]">LL_SlvFeatReqHandler</a> from ll_pdu_conn.o(i.LL_SlvFeatReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[103]">LL_StartEncReqHandler</a> from ll_pdu_conn.o(i.LL_StartEncReqHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[104]">LL_StartEncRspHandler</a> from ll_pdu_conn.o(i.LL_StartEncRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[100]">LL_TerminateIndHandler</a> from ll_pdu_conn.o(i.LL_TerminateIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[105]">LL_UnKnownRspHandler</a> from ll_pdu_conn.o(i.LL_UnKnownRspHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[10a]">LL_VerIndHandler</a> from ll_pdu_conn.o(i.LL_VerIndHandler) referenced from ll_pdu_conn.o(.constdata)
 <LI><a href="#[26]">LP_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[12]">PWM_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from port.o(.ramfunc) referenced from startup_panseries.o(RESET)
 <LI><a href="#[115]">Reset_Handler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[25]">SLPTMR_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_panseries.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from port.o(.ramfunc) referenced from startup_panseries.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_panseries.o(i.SystemInit) referenced from startup_panseries.o(.text)
 <LI><a href="#[16]">TMR0_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1a]">TMR1_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[1b]">TMR2_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[22]">TRIM_IRQHandler</a> from nimble_glue_spark.o(i.TRIM_IRQHandler) referenced from startup_panseries.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from uart_at.o(i.UART1_IRQHandler) referenced from startup_panseries.o(RESET)
 <LI><a href="#[20]">USBDMA_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[21]">USB_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[14]">WDT_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[15]">WWDT_IRQHandler</a> from startup_panseries.o(.text) referenced from startup_panseries.o(RESET)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_panseries.o(.text)
 <LI><a href="#[3b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[3a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3c]">app_ble_thread_entry</a> from uart_at.o(i.app_ble_thread_entry) referenced from uart_at.o(i.app_ble_thread_init)
 <LI><a href="#[3]">bd_erase</a> from mtb_init.o(i.bd_erase) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[6]">bd_erase_size</a> from mtb_init.o(i.bd_erase_size) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[2]">bd_program</a> from mtb_init.o(i.bd_program) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[5]">bd_program_size</a> from mtb_init.o(i.bd_program_size) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[1]">bd_read</a> from mtb_init.o(i.bd_read) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[4]">bd_read_size</a> from mtb_init.o(i.bd_read_size) referenced 2 times from mtb_init.o(.data)
 <LI><a href="#[54]">ble_app_user_evt</a> from ble_hs.o(i.ble_app_user_evt) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[76]">ble_att_clt_rx_error</a> from ble_att_clt.o(i.ble_att_clt_rx_error) referenced from ble_att.o(.constdata)
 <LI><a href="#[8c]">ble_att_clt_rx_exec_write</a> from ble_att_clt.o(i.ble_att_clt_rx_exec_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[7a]">ble_att_clt_rx_find_info</a> from ble_att_clt.o(i.ble_att_clt_rx_find_info) referenced from ble_att.o(.constdata)
 <LI><a href="#[7c]">ble_att_clt_rx_find_type_value</a> from ble_att_clt.o(i.ble_att_clt_rx_find_type_value) referenced from ble_att.o(.constdata)
 <LI><a href="#[8f]">ble_att_clt_rx_indicate</a> from ble_att_clt.o(i.ble_att_clt_rx_indicate) referenced from ble_att.o(.constdata)
 <LI><a href="#[78]">ble_att_clt_rx_mtu</a> from ble_att_clt.o(i.ble_att_clt_rx_mtu) referenced from ble_att.o(.constdata)
 <LI><a href="#[8a]">ble_att_clt_rx_prep_write</a> from ble_att_clt.o(i.ble_att_clt_rx_prep_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[80]">ble_att_clt_rx_read</a> from ble_att_clt.o(i.ble_att_clt_rx_read) referenced from ble_att.o(.constdata)
 <LI><a href="#[82]">ble_att_clt_rx_read_blob</a> from ble_att_clt.o(i.ble_att_clt_rx_read_blob) referenced from ble_att.o(.constdata)
 <LI><a href="#[86]">ble_att_clt_rx_read_group_type</a> from ble_att_clt.o(i.ble_att_clt_rx_read_group_type) referenced from ble_att.o(.constdata)
 <LI><a href="#[84]">ble_att_clt_rx_read_mult</a> from ble_att_clt.o(i.ble_att_clt_rx_read_mult) referenced from ble_att.o(.constdata)
 <LI><a href="#[7e]">ble_att_clt_rx_read_type</a> from ble_att_clt.o(i.ble_att_clt_rx_read_type) referenced from ble_att.o(.constdata)
 <LI><a href="#[88]">ble_att_clt_rx_write</a> from ble_att_clt.o(i.ble_att_clt_rx_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[41]">ble_att_rx</a> from ble_att.o(i.ble_att_rx) referenced from ble_att.o(i.ble_att_create_chan)
 <LI><a href="#[8b]">ble_att_svr_rx_exec_write</a> from ble_att_svr.o(i.ble_att_svr_rx_exec_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[79]">ble_att_svr_rx_find_info</a> from ble_att_svr.o(i.ble_att_svr_rx_find_info) referenced from ble_att.o(.constdata)
 <LI><a href="#[7b]">ble_att_svr_rx_find_type_value</a> from ble_att_svr.o(i.ble_att_svr_rx_find_type_value) referenced from ble_att.o(.constdata)
 <LI><a href="#[8e]">ble_att_svr_rx_indicate</a> from ble_att_svr.o(i.ble_att_svr_rx_indicate) referenced from ble_att.o(.constdata)
 <LI><a href="#[77]">ble_att_svr_rx_mtu</a> from ble_att_svr.o(i.ble_att_svr_rx_mtu) referenced from ble_att.o(.constdata)
 <LI><a href="#[8d]">ble_att_svr_rx_notify</a> from ble_att_svr.o(i.ble_att_svr_rx_notify) referenced from ble_att.o(.constdata)
 <LI><a href="#[89]">ble_att_svr_rx_prep_write</a> from ble_att_svr.o(i.ble_att_svr_rx_prep_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[7f]">ble_att_svr_rx_read</a> from ble_att_svr.o(i.ble_att_svr_rx_read) referenced from ble_att.o(.constdata)
 <LI><a href="#[81]">ble_att_svr_rx_read_blob</a> from ble_att_svr.o(i.ble_att_svr_rx_read_blob) referenced from ble_att.o(.constdata)
 <LI><a href="#[85]">ble_att_svr_rx_read_group_type</a> from ble_att_svr.o(i.ble_att_svr_rx_read_group_type) referenced from ble_att.o(.constdata)
 <LI><a href="#[83]">ble_att_svr_rx_read_mult</a> from ble_att_svr.o(i.ble_att_svr_rx_read_mult) referenced from ble_att.o(.constdata)
 <LI><a href="#[7d]">ble_att_svr_rx_read_type</a> from ble_att_svr.o(i.ble_att_svr_rx_read_type) referenced from ble_att.o(.constdata)
 <LI><a href="#[87]">ble_att_svr_rx_write</a> from ble_att_svr.o(i.ble_att_svr_rx_write) referenced from ble_att.o(.constdata)
 <LI><a href="#[90]">ble_att_svr_rx_write_no_rsp</a> from ble_att_svr.o(i.ble_att_svr_rx_write_no_rsp) referenced from ble_att.o(.constdata)
 <LI><a href="#[42]">ble_gap_update_l2cap_cb</a> from ble_gap.o(i.ble_gap_update_l2cap_cb) referenced from ble_gap.o(i.ble_gap_rx_update_complete)
 <LI><a href="#[42]">ble_gap_update_l2cap_cb</a> from ble_gap.o(i.ble_gap_update_l2cap_cb) referenced from ble_gap.o(i.ble_gap_update_params)
 <LI><a href="#[95]">ble_gattc_disc_all_chrs_err</a> from ble_gattc.o(i.ble_gattc_disc_all_chrs_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a3]">ble_gattc_disc_all_chrs_resume</a> from ble_gattc.o(i.ble_gattc_disc_all_chrs_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b9]">ble_gattc_disc_all_chrs_rx_adata</a> from ble_gattc.o(i.ble_gattc_disc_all_chrs_rx_adata) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bd]">ble_gattc_disc_all_chrs_rx_complete</a> from ble_gattc.o(i.ble_gattc_disc_all_chrs_rx_complete) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ad]">ble_gattc_disc_all_chrs_tmo</a> from ble_gattc.o(i.ble_gattc_disc_all_chrs_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[97]">ble_gattc_disc_all_dscs_err</a> from ble_gattc.o(i.ble_gattc_disc_all_dscs_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a5]">ble_gattc_disc_all_dscs_resume</a> from ble_gattc.o(i.ble_gattc_disc_all_dscs_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[af]">ble_gattc_disc_all_dscs_tmo</a> from ble_gattc.o(i.ble_gattc_disc_all_dscs_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[92]">ble_gattc_disc_all_svcs_err</a> from ble_gattc.o(i.ble_gattc_disc_all_svcs_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a0]">ble_gattc_disc_all_svcs_resume</a> from ble_gattc.o(i.ble_gattc_disc_all_svcs_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[aa]">ble_gattc_disc_all_svcs_tmo</a> from ble_gattc.o(i.ble_gattc_disc_all_svcs_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[96]">ble_gattc_disc_chr_uuid_err</a> from ble_gattc.o(i.ble_gattc_disc_chr_uuid_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a4]">ble_gattc_disc_chr_uuid_resume</a> from ble_gattc.o(i.ble_gattc_disc_chr_uuid_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ba]">ble_gattc_disc_chr_uuid_rx_adata</a> from ble_gattc.o(i.ble_gattc_disc_chr_uuid_rx_adata) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[be]">ble_gattc_disc_chr_uuid_rx_complete</a> from ble_gattc.o(i.ble_gattc_disc_chr_uuid_rx_complete) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ae]">ble_gattc_disc_chr_uuid_tmo</a> from ble_gattc.o(i.ble_gattc_disc_chr_uuid_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[93]">ble_gattc_disc_svc_uuid_err</a> from ble_gattc.o(i.ble_gattc_disc_svc_uuid_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a1]">ble_gattc_disc_svc_uuid_resume</a> from ble_gattc.o(i.ble_gattc_disc_svc_uuid_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ab]">ble_gattc_disc_svc_uuid_tmo</a> from ble_gattc.o(i.ble_gattc_disc_svc_uuid_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[94]">ble_gattc_find_inc_svcs_err</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a2]">ble_gattc_find_inc_svcs_resume</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b8]">ble_gattc_find_inc_svcs_rx_adata</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_adata) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bc]">ble_gattc_find_inc_svcs_rx_complete</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_complete) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c2]">ble_gattc_find_inc_svcs_rx_read_rsp</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_read_rsp) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[ac]">ble_gattc_find_inc_svcs_tmo</a> from ble_gattc.o(i.ble_gattc_find_inc_svcs_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[91]">ble_gattc_mtu_err</a> from ble_gattc.o(i.ble_gattc_mtu_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a9]">ble_gattc_mtu_tmo</a> from ble_gattc.o(i.ble_gattc_mtu_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_connection_broken)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_err)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_find_info_complete)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_find_info_idata)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_find_type_value_complete)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_find_type_value_hinfo)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_mtu)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_read_blob_rsp)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_read_group_type_adata)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_read_group_type_complete)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_read_mult_rsp)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gattc_rx_write_rsp)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gatts_indicate_fail_notconn)
 <LI><a href="#[43]">ble_gattc_proc_matches_conn_op</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_op) referenced from ble_gattc.o(i.ble_gatts_rx_indicate_rsp)
 <LI><a href="#[44]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry) referenced from ble_gattc.o(i.ble_gattc_rx_exec_write_rsp)
 <LI><a href="#[44]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry) referenced from ble_gattc.o(i.ble_gattc_rx_prep_write_rsp)
 <LI><a href="#[44]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry) referenced from ble_gattc.o(i.ble_gattc_rx_read_rsp)
 <LI><a href="#[44]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry) referenced from ble_gattc.o(i.ble_gattc_rx_read_type_adata)
 <LI><a href="#[44]">ble_gattc_proc_matches_conn_rx_entry</a> from ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry) referenced from ble_gattc.o(i.ble_gattc_rx_read_type_complete)
 <LI><a href="#[45]">ble_gattc_proc_matches_expired</a> from ble_gattc.o(i.ble_gattc_proc_matches_expired) referenced from ble_gattc.o(i.ble_gattc_timer)
 <LI><a href="#[46]">ble_gattc_proc_matches_stalled</a> from ble_gattc.o(i.ble_gattc_proc_matches_stalled) referenced from ble_gattc.o(i.ble_gattc_timer)
 <LI><a href="#[98]">ble_gattc_read_err</a> from ble_gattc.o(i.ble_gattc_read_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[9a]">ble_gattc_read_long_err</a> from ble_gattc.o(i.ble_gattc_read_long_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a6]">ble_gattc_read_long_resume</a> from ble_gattc.o(i.ble_gattc_read_long_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c1]">ble_gattc_read_long_rx_read_rsp</a> from ble_gattc.o(i.ble_gattc_read_long_rx_read_rsp) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b2]">ble_gattc_read_long_tmo</a> from ble_gattc.o(i.ble_gattc_read_long_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[9b]">ble_gattc_read_mult_err</a> from ble_gattc.o(i.ble_gattc_read_mult_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b3]">ble_gattc_read_mult_tmo</a> from ble_gattc.o(i.ble_gattc_read_mult_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c0]">ble_gattc_read_rx_read_rsp</a> from ble_gattc.o(i.ble_gattc_read_rx_read_rsp) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b0]">ble_gattc_read_tmo</a> from ble_gattc.o(i.ble_gattc_read_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[99]">ble_gattc_read_uuid_err</a> from ble_gattc.o(i.ble_gattc_read_uuid_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bb]">ble_gattc_read_uuid_rx_adata</a> from ble_gattc.o(i.ble_gattc_read_uuid_rx_adata) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[bf]">ble_gattc_read_uuid_rx_complete</a> from ble_gattc.o(i.ble_gattc_read_uuid_rx_complete) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b1]">ble_gattc_read_uuid_tmo</a> from ble_gattc.o(i.ble_gattc_read_uuid_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[9c]">ble_gattc_write_err</a> from ble_gattc.o(i.ble_gattc_write_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[9d]">ble_gattc_write_long_err</a> from ble_gattc.o(i.ble_gattc_write_long_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a7]">ble_gattc_write_long_resume</a> from ble_gattc.o(i.ble_gattc_write_long_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c5]">ble_gattc_write_long_rx_exec</a> from ble_gattc.o(i.ble_gattc_write_long_rx_exec) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c3]">ble_gattc_write_long_rx_prep</a> from ble_gattc.o(i.ble_gattc_write_long_rx_prep) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b5]">ble_gattc_write_long_tmo</a> from ble_gattc.o(i.ble_gattc_write_long_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[9e]">ble_gattc_write_reliable_err</a> from ble_gattc.o(i.ble_gattc_write_reliable_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[a8]">ble_gattc_write_reliable_resume</a> from ble_gattc.o(i.ble_gattc_write_reliable_resume) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c6]">ble_gattc_write_reliable_rx_exec</a> from ble_gattc.o(i.ble_gattc_write_reliable_rx_exec) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[c4]">ble_gattc_write_reliable_rx_prep</a> from ble_gattc.o(i.ble_gattc_write_reliable_rx_prep) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b6]">ble_gattc_write_reliable_tmo</a> from ble_gattc.o(i.ble_gattc_write_reliable_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b4]">ble_gattc_write_tmo</a> from ble_gattc.o(i.ble_gattc_write_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[49]">ble_gatts_chr_def_access</a> from ble_gatts.o(i.ble_gatts_chr_def_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[4a]">ble_gatts_chr_val_access</a> from ble_gatts.o(i.ble_gatts_chr_val_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[4b]">ble_gatts_clt_cfg_access</a> from ble_gatts.o(i.ble_gatts_clt_cfg_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[4c]">ble_gatts_dsc_access</a> from ble_gatts.o(i.ble_gatts_dsc_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[48]">ble_gatts_inc_access</a> from ble_gatts.o(i.ble_gatts_inc_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[9f]">ble_gatts_indicate_err</a> from ble_gattc.o(i.ble_gatts_indicate_err) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[b7]">ble_gatts_indicate_tmo</a> from ble_gattc.o(i.ble_gatts_indicate_tmo) referenced from ble_gattc.o(.constdata)
 <LI><a href="#[47]">ble_gatts_svc_access</a> from ble_gatts.o(i.ble_gatts_svc_access) referenced from ble_gatts.o(i.ble_gatts_register_svcs)
 <LI><a href="#[6c]">ble_hci_acl_ll_to_host_cbk</a> from nimble_glue_spark.o(i.ble_hci_acl_ll_to_host_cbk) referenced from nimble_glue_spark.o(i.ll_init)
 <LI><a href="#[6d]">ble_hci_evt_ll_to_host_cbk</a> from nimble_glue_spark.o(i.ble_hci_evt_ll_to_host_cbk) referenced from nimble_glue_spark.o(i.ll_init)
 <LI><a href="#[51]">ble_hs_event_reset</a> from ble_hs.o(i.ble_hs_event_reset) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[55]">ble_hs_event_rx_data</a> from ble_hs.o(i.ble_hs_event_rx_data) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[4e]">ble_hs_event_rx_hci_ev</a> from ble_hs.o(i.ble_hs_event_rx_hci_ev) referenced from ble_hs.o(i.ble_hs_enqueue_hci_event)
 <LI><a href="#[52]">ble_hs_event_start_stage1</a> from ble_hs.o(i.ble_hs_event_start_stage1) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[53]">ble_hs_event_start_stage2</a> from ble_hs.o(i.ble_hs_event_start_stage2) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[50]">ble_hs_event_tx_notify</a> from ble_hs.o(i.ble_hs_event_tx_notify) referenced from ble_hs.o(i.ble_hs_init)
 <LI><a href="#[c9]">ble_hs_hci_evt_disconn_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_disconn_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[cb]">ble_hs_hci_evt_enc_key_refresh</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_enc_key_refresh) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[ca]">ble_hs_hci_evt_encrypt_change</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_encrypt_change) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[cc]">ble_hs_hci_evt_hw_error</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_hw_error) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[ce]">ble_hs_hci_evt_le_adv_rpt</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_adv_rpt) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[db]">ble_hs_hci_evt_le_adv_set_terminated</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_adv_set_terminated) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[cd]">ble_hs_hci_evt_le_conn_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d2]">ble_hs_hci_evt_le_conn_parm_req</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_parm_req) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[cf]">ble_hs_hci_evt_le_conn_upd_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_upd_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d4]">ble_hs_hci_evt_le_dir_adv_rpt</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_dir_adv_rpt) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d3]">ble_hs_hci_evt_le_enh_conn_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_enh_conn_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d6]">ble_hs_hci_evt_le_ext_adv_rpt</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_ext_adv_rpt) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d1]">ble_hs_hci_evt_le_lt_key_req</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_lt_key_req) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[c7]">ble_hs_hci_evt_le_meta</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_meta) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d8]">ble_hs_hci_evt_le_periodic_adv_rpt</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_rpt) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d7]">ble_hs_hci_evt_le_periodic_adv_sync_estab</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_estab) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d9]">ble_hs_hci_evt_le_periodic_adv_sync_lost</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_lost) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[dd]">ble_hs_hci_evt_le_periodic_adv_sync_transfer</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_transfer) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d5]">ble_hs_hci_evt_le_phy_update_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_phy_update_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[d0]">ble_hs_hci_evt_le_rd_rem_used_feat_complete</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_rd_rem_used_feat_complete) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[dc]">ble_hs_hci_evt_le_scan_req_rcvd</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_scan_req_rcvd) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[da]">ble_hs_hci_evt_le_scan_timeout</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_scan_timeout) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[c8]">ble_hs_hci_evt_num_completed_pkts</a> from ble_hs_hci_evt.o(i.ble_hs_hci_evt_num_completed_pkts) referenced from ble_hs_hci_evt.o(.constdata)
 <LI><a href="#[4f]">ble_hs_hci_frag_alloc</a> from ble_hs_hci.o(i.ble_hs_hci_frag_alloc) referenced from ble_hs_hci.o(i.ble_hs_hci_acl_tx_now)
 <LI><a href="#[56]">ble_hs_misc_restore_one_irk</a> from ble_hs_misc.o(i.ble_hs_misc_restore_one_irk) referenced from ble_hs_misc.o(i.ble_hs_misc_restore_irks)
 <LI><a href="#[58]">ble_hs_stop_terminate_timeout_cb</a> from ble_hs_stop.o(i.ble_hs_stop_terminate_timeout_cb) referenced from ble_hs_stop.o(i.ble_hs_stop_init)
 <LI><a href="#[69]">ble_hs_thread_entry</a> from nimble_glue_spark.o(i.ble_hs_thread_entry) referenced from nimble_glue_spark.o(i.hs_thread_init)
 <LI><a href="#[57]">ble_hs_timer_exp</a> from ble_hs.o(i.ble_hs_timer_exp) referenced from ble_hs.o(i.ble_hs_start)
 <LI><a href="#[59]">ble_l2cap_sig_rx</a> from ble_l2cap_sig.o(i.ble_l2cap_sig_rx) referenced from ble_l2cap_sig.o(i.ble_l2cap_sig_create_chan)
 <LI><a href="#[df]">ble_l2cap_sig_rx_noop</a> from ble_l2cap_sig.o(i.ble_l2cap_sig_rx_noop) referenced 16 times from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[de]">ble_l2cap_sig_rx_reject</a> from ble_l2cap_sig.o(i.ble_l2cap_sig_rx_reject) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[e0]">ble_l2cap_sig_update_req_rx</a> from ble_l2cap_sig.o(i.ble_l2cap_sig_update_req_rx) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[e1]">ble_l2cap_sig_update_rsp_rx</a> from ble_l2cap_sig.o(i.ble_l2cap_sig_update_rsp_rx) referenced from ble_l2cap_sig.o(.constdata)
 <LI><a href="#[5a]">ble_sm_alg_rand</a> from ble_sm_alg.o(i.ble_sm_alg_rand) referenced from ble_sm_alg.o(i.ble_sm_alg_ecc_init)
 <LI><a href="#[f1]">ble_sm_confirm_exec</a> from ble_sm.o(i.ble_sm_confirm_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e4]">ble_sm_confirm_rx</a> from ble_sm.o(i.ble_sm_confirm_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e7]">ble_sm_enc_info_rx</a> from ble_sm.o(i.ble_sm_enc_info_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f6]">ble_sm_enc_restore_exec</a> from ble_sm.o(i.ble_sm_enc_restore_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f5]">ble_sm_enc_start_exec</a> from ble_sm.o(i.ble_sm_enc_start_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e6]">ble_sm_fail_rx</a> from ble_sm.o(i.ble_sm_fail_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ea]">ble_sm_id_addr_info_rx</a> from ble_sm.o(i.ble_sm_id_addr_info_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e9]">ble_sm_id_info_rx</a> from ble_sm.o(i.ble_sm_id_info_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f7]">ble_sm_key_exch_exec</a> from ble_sm.o(i.ble_sm_key_exch_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f4]">ble_sm_ltk_restore_exec</a> from ble_sm.o(i.ble_sm_ltk_restore_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f3]">ble_sm_ltk_start_exec</a> from ble_sm.o(i.ble_sm_ltk_start_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e8]">ble_sm_master_id_rx</a> from ble_sm.o(i.ble_sm_master_id_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f0]">ble_sm_pair_exec</a> from ble_sm.o(i.ble_sm_pair_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e2]">ble_sm_pair_req_rx</a> from ble_sm.o(i.ble_sm_pair_req_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e3]">ble_sm_pair_rsp_rx</a> from ble_sm.o(i.ble_sm_pair_rsp_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f2]">ble_sm_random_exec</a> from ble_sm.o(i.ble_sm_random_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[e5]">ble_sm_random_rx</a> from ble_sm.o(i.ble_sm_random_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[5b]">ble_sm_rx</a> from ble_sm.o(i.ble_sm_rx) referenced from ble_sm.o(i.ble_sm_create_chan)
 <LI><a href="#[ef]">ble_sm_rx_noop</a> from ble_sm.o(i.ble_sm_rx_noop) referenced from ble_sm.o(.constdata)
 <LI><a href="#[fa]">ble_sm_sc_dhkey_check_exec</a> from ble_sm_sc.o(i.ble_sm_sc_dhkey_check_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ee]">ble_sm_sc_dhkey_check_rx</a> from ble_sm_sc.o(i.ble_sm_sc_dhkey_check_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f9]">ble_sm_sc_public_key_exec</a> from ble_sm_sc.o(i.ble_sm_sc_public_key_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ed]">ble_sm_sc_public_key_rx</a> from ble_sm_sc.o(i.ble_sm_sc_public_key_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[f8]">ble_sm_sec_req_exec</a> from ble_sm.o(i.ble_sm_sec_req_exec) referenced from ble_sm.o(.constdata)
 <LI><a href="#[ec]">ble_sm_sec_req_rx</a> from ble_sm.o(i.ble_sm_sec_req_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[eb]">ble_sm_sign_info_rx</a> from ble_sm.o(i.ble_sm_sign_info_rx) referenced from ble_sm.o(.constdata)
 <LI><a href="#[5e]">ble_store_config_delete</a> from ble_store_config.o(i.ble_store_config_delete) referenced from ble_store_config.o(i.ble_store_config_init)
 <LI><a href="#[5c]">ble_store_config_read</a> from ble_store_config.o(i.ble_store_config_read) referenced from ble_store_config.o(i.ble_store_config_init)
 <LI><a href="#[5d]">ble_store_config_write</a> from ble_store_config.o(i.ble_store_config_write) referenced from ble_store_config.o(i.ble_store_config_init)
 <LI><a href="#[5f]">ble_store_util_iter_replace_mac</a> from ble_store_config.o(i.ble_store_util_iter_replace_mac) referenced from ble_store_config.o(i.ble_store_iterate_replace_cccd)
 <LI><a href="#[60]">ble_store_util_iter_unique_peer</a> from ble_store_util.o(i.ble_store_util_iter_unique_peer) referenced from ble_store_util.o(i.ble_store_util_bonded_peers)
 <LI><a href="#[3f]">ble_store_util_status_rr</a> from ble_store_util.o(i.ble_store_util_status_rr) referenced from main.o(i.app_init)
 <LI><a href="#[61]">ble_transport_acl_put</a> from transport.o(i.ble_transport_acl_put) referenced from transport.o(i.ble_transport_init)
 <LI><a href="#[62]">blecent_gap_event</a> from main.o(i.blecent_gap_event) referenced from main.o(i.blecent_gap_event)
 <LI><a href="#[62]">blecent_gap_event</a> from main.o(i.blecent_gap_event) referenced from main.o(i.blecent_scan)
 <LI><a href="#[63]">blecent_on_disc_complete</a> from main.o(i.blecent_on_disc_complete) referenced from main.o(i.blecent_gap_event)
 <LI><a href="#[64]">blecent_on_read</a> from main.o(i.blecent_on_read) referenced from main.o(i.blecent_on_disc_complete)
 <LI><a href="#[3d]">blecent_on_reset</a> from main.o(i.blecent_on_reset) referenced from main.o(i.app_init)
 <LI><a href="#[66]">blecent_on_subscribe</a> from main.o(i.blecent_on_subscribe) referenced from main.o(i.blecent_on_disc_complete)
 <LI><a href="#[3e]">blecent_on_sync</a> from main.o(i.blecent_on_sync) referenced from main.o(i.app_init)
 <LI><a href="#[65]">blecent_on_write</a> from main.o(i.blecent_on_write) referenced from main.o(i.blecent_on_disc_complete)
 <LI><a href="#[65]">blecent_on_write</a> from main.o(i.blecent_on_write) referenced from main.o(i.central_write)
 <LI><a href="#[40]">blehr_tx_hrate</a> from main.o(i.blehr_tx_hrate) referenced from main.o(i.app_init)
 <LI><a href="#[67]">bleph_gap_event</a> from main.o(i.bleph_gap_event) referenced from main.o(i.blehr_advertise)
 <LI><a href="#[68]">btshell_on_mtu</a> from main.o(i.btshell_on_mtu) referenced from main.o(i.bleph_gap_event)
 <LI><a href="#[fb]">double_jacobian_default</a> from ecc.o(i.double_jacobian_default) referenced 2 times from ble_sm_alg.o(.constdata)
 <LI><a href="#[4d]">find_field_func</a> from ble_hs_adv.o(i.find_field_func) referenced from ble_hs_adv.o(i.ble_hs_adv_find_field)
 <LI><a href="#[39]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[39]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[7]">gatt_svr_chr_access_heart_rate</a> from gatt_svr.o(i.gatt_svr_chr_access_heart_rate) referenced 2 times from gatt_svr.o(.data)
 <LI><a href="#[8]">gatt_svr_chr_access_uart_read_write</a> from gatt_svr.o(i.gatt_svr_chr_access_uart_read_write) referenced 2 times from gatt_svr.o(.data)
 <LI><a href="#[6a]">host_copydata</a> from nimble_glue_spark.o(i.host_copydata) referenced from nimble_glue_spark.o(i.ll_init)
 <LI><a href="#[6b]">ll_semphr_cback</a> from nimble_glue_spark.o(.ramfunc) referenced from nimble_glue_spark.o(i.ll_init)
 <LI><a href="#[27]">main</a> from os_setup.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">mem_alloc</a> from nimble_glue_spark.o(i.mem_alloc) referenced 2 times from nimble_glue_spark.o(.data)
 <LI><a href="#[6f]">os_callout_timer_cb</a> from npl_os_freertos.o(i.os_callout_timer_cb) referenced from npl_os_freertos.o(i.npl_freertos_callout_init)
 <LI><a href="#[71]">peer_chr_disced</a> from peer.o(i.peer_chr_disced) referenced from peer.o(i.peer_disc_chrs)
 <LI><a href="#[72]">peer_dsc_disced</a> from peer.o(i.peer_dsc_disced) referenced from peer.o(i.peer_disc_chrs)
 <LI><a href="#[72]">peer_dsc_disced</a> from peer.o(i.peer_dsc_disced) referenced from peer.o(i.peer_disc_dscs)
 <LI><a href="#[70]">peer_svc_disced</a> from peer.o(i.peer_svc_disced) referenced from peer.o(i.peer_disc_all)
 <LI><a href="#[74]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[73]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[75]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[fd]">vli_mmod_fast_secp256r1</a> from ecc.o(i.vli_mmod_fast_secp256r1) referenced 2 times from ble_sm_alg.o(.constdata)
 <LI><a href="#[6e]">vprintf</a> from printfa.o(i.__0vprintf) referenced from os_setup.o(i.main)
 <LI><a href="#[fc]">x_side_default</a> from ecc.o(i.x_side_default) referenced 2 times from ble_sm_alg.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(.text)
</UL>
<P><STRONG><a name="[4db]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[116]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4dc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4dd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4de]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[4df]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4e0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[4a1]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4a5]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler (via Veneer)
</UL>

<P><STRONG><a name="[4a6]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler (via Veneer)
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_panseries.o(.text))

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SLPTMR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_panseries.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[4e1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPeripheralFreq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetErrRange
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseCodeArea
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_from
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_garbage_collection
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_buffered_write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Calibrate32kRC
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Get32kRCMeasureValue (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SelectNextChanIndex
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo (via Veneer)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetChanIndex (via Veneer)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerTicksToRtc (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustDataChannelIndexEx (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetAuthPayloadTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler (via Veneer)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtHandler (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyHandleTxQueue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnUpdCmpl
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtx
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FindActMst (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectExtIndHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatRspHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenRspHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenReqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustDataChannelIndexEx (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler (via Veneer)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_VerIndHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UnKnownRspHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectIndHandler
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_rtos_mutex_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_32kTrackingInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_IsTimeExpired (via Veneer)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4e3]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_IsLeEvtEnabled
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_IsEvtEnabled
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4e4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashUniqueId
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadStream
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate_replace_cccd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_start_exec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_restore_exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_start_exec
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pack_chains
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_unique_peer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_replace_mac
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_buffered_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_evt_ll_to_host_cbk
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_sec
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_read
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleProc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_code
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process
</UL>

<P><STRONG><a name="[420]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pack_chains
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_delete
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_update_ram_table
</UL>

<P><STRONG><a name="[4e6]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4e7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_data_init
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init_from_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport
</UL>

<P><STRONG><a name="[4e9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_read_record
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_garbage_collection
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_find_record_in_ram_table
</UL>

<P><STRONG><a name="[14e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_mac_addr_get
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_except
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_oob_confirm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_unique_peer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_replace_mac
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_sec
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_cccd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_read_record
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>

<P><STRONG><a name="[473]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4ea]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[288]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[117]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4ec]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4ed]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[125]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4ee]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>ADC_SetCalirationParams</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_panseries.o(i.ADC_SetCalirationParams))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[12e]"></a>AES_Encrypt</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, aes.o(i.AES_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AES_Encrypt &rArr; _rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rijndaelSetKey
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqReplyHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Encrypt
</UL>

<P><STRONG><a name="[132]"></a>AES_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aes.o(i.AES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_Init &rArr; BB_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[135]"></a>BB_32kTrackingInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bb.o(i.BB_32kTrackingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BB_32kTrackingInit &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Calibrate32kRC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clktrim_measure_32k_clk_start (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init
</UL>

<P><STRONG><a name="[136]"></a>BB_Calibrate32kRC</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, bb.o(i.BB_Calibrate32kRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BB_Calibrate32kRC &rArr; TRIM_SetErrRange &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetErrRange
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetCalWaitCnt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetCalCnt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_32kTrackingInit
</UL>

<P><STRONG><a name="[13b]"></a>BB_DebugInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bb.o(i.BB_DebugInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BB_DebugInit &rArr; BB_SetDebugChn
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetDebugChn
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[13d]"></a>BB_DtmStartReceiverV1</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bb.o(i.BB_DtmStartReceiverV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BB_DtmStartReceiverV1 &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnableLDO (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[143]"></a>BB_DtmStartReceiverV2</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bb.o(i.BB_DtmStartReceiverV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BB_DtmStartReceiverV2 &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnableLDO (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[144]"></a>BB_DtmStartTransimitterV1</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, bb.o(i.BB_DtmStartTransimitterV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BB_DtmStartTransimitterV1 &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnableLDO (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[145]"></a>BB_DtmStartTransimitterV2</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, bb.o(i.BB_DtmStartTransimitterV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BB_DtmStartTransimitterV2 &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnableLDO (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[146]"></a>BB_DtmStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bb.o(i.BB_DtmStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BB_DtmStop &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[147]"></a>BB_Init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, bb.o(i.BB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRandSeed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_32kTrackingInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1f9]"></a>BB_ListMemAlloc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bb_mem.o(i.BB_ListMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BB_ListMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitWhiteListMem
</UL>

<P><STRONG><a name="[133]"></a>BB_MemAlloc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bb_mem.o(i.BB_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BB_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInitiatorInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitScanMem
</UL>

<P><STRONG><a name="[14a]"></a>BB_RandInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bb.o(i.BB_RandInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRandSeed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13c]"></a>BB_SetDebugChn</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bb.o(i.BB_SetDebugChn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BB_SetDebugChn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DebugReset (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DebugInit
</UL>

<P><STRONG><a name="[1bb]"></a>BB_SetListMap</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bb.o(i.BB_SetListMap))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoveDeviceFromWhiteList
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToWhiteList
</UL>

<P><STRONG><a name="[14b]"></a>BB_SetTxPower</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bb.o(i.BB_SetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BB_SetTxPower &rArr; RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_VsCmdHandler
</UL>

<P><STRONG><a name="[14d]"></a>BdaCmp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bd_addr.o(i.BdaCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoveDeviceFromWhiteList
</UL>

<P><STRONG><a name="[14f]"></a>BdaCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bd_addr.o(i.BdaCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BdaCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToWhiteList
</UL>

<P><STRONG><a name="[4da]"></a>BitReverse8</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, math.o(i.BitReverse8))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrand (via Veneer)
</UL>

<P><STRONG><a name="[177]"></a>BstreamToUint64</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, byte_stream.o(i.BstreamToUint64))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BstreamToUint64
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DecodeCtrlPdu
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[48f]"></a>CLK_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pan_clk.o(i.CLK_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
</UL>

<P><STRONG><a name="[44e]"></a>CLK_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pan_clk.o(i.CLK_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[499]"></a>CLK_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pan_clk.o(i.CLK_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_at_init
</UL>

<P><STRONG><a name="[151]"></a>CLK_GetPeripheralFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pan_clk.o(i.CLK_GetPeripheralFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPeripheralFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[153]"></a>CLK_RefClkSrcConfig</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, pan_clk.o(i.CLK_RefClkSrcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_RefClkSrcConfig &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
</UL>

<P><STRONG><a name="[476]"></a>CLK_ResetChip</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pan_clk.o(i.CLK_ResetChip))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[48e]"></a>CLK_SYSCLKConfig</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, pan_clk.o(i.CLK_SYSCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SYSCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
</UL>

<P><STRONG><a name="[276]"></a>CLK_Set3vSyncAuto</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pan_clk.o(i.CLK_Set3vSyncAuto))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[48d]"></a>CLK_WaitClockReady</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, pan_clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
</UL>

<P><STRONG><a name="[229]"></a>ComputeAccessAddr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, math.o(i.ComputeAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[22a]"></a>ComputeHopInc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, math.o(i.ComputeHopInc))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[154]"></a>EccPoint_compute_public_key</STRONG> (Thumb, 160 bytes, Stack size 128 bytes, ecc.o(i.EccPoint_compute_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[158]"></a>EccPoint_isZero</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ecc.o(i.EccPoint_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EccPoint_isZero &rArr; uECC_vli_isZero
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[156]"></a>EccPoint_mult</STRONG> (Thumb, 530 bytes, Stack size 344 bytes, ecc.o(i.EccPoint_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[18a]"></a>FIFO_Init</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fifo.o(i.FIFO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxCmdMem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxAclMem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitScanMem
</UL>

<P><STRONG><a name="[160]"></a>FMC_Erase</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pan_fmc.o(i.FMC_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_TrigErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WritePageInternal
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseSector
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseCodeArea
</UL>

<P><STRONG><a name="[162]"></a>FMC_EraseCodeArea</STRONG> (Thumb, 694 bytes, Stack size 80 bytes, pan_fmc.o(i.FMC_EraseCodeArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FMC_EraseCodeArea &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashCodeAreaSize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_erase
</UL>

<P><STRONG><a name="[164]"></a>FMC_EraseSector</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pan_fmc.o(i.FMC_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_EraseSector &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashCodeAreaSize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[163]"></a>FMC_GetFlashCodeAreaSize</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pan_fmc.o(i.FMC_GetFlashCodeAreaSize))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteStream
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadStream
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseSector
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseCodeArea
</UL>

<P><STRONG><a name="[273]"></a>FMC_GetFlashJedecId</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pan_fmc.o(i.FMC_GetFlashJedecId))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[165]"></a>FMC_GetFlashUniqueId</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pan_fmc.o(i.FMC_GetFlashUniqueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_GetFlashUniqueId &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[272]"></a>FMC_ParamsSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pan_fmc.o(i.FMC_ParamsSet))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[167]"></a>FMC_ReadInfoArea</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pan_fmc.o(i.FMC_ReadInfoArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadStream
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_read_from_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_info_tlv_data
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_init_iter
</UL>

<P><STRONG><a name="[168]"></a>FMC_ReadStream</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, pan_fmc.o(i.FMC_ReadStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashCodeAreaSize
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadInfoArea
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_read
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
</UL>

<P><STRONG><a name="[274]"></a>FMC_SetFlashCapacity</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, pan_fmc.o(i.FMC_SetFlashCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[169]"></a>FMC_SetFlashMode</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, pan_fmc.o(i.FMC_SetFlashMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_SetFlashMode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_TrigErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16b]"></a>FMC_WriteStream</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, pan_fmc.o(i.FMC_WriteStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FMC_WriteStream &rArr; FMC_WritePageInternal &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WritePageInternal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashCodeAreaSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_program
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[28]"></a>Hard_Fault_Handler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hard_Fault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[1f6]"></a>HeapAlloc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heap.o(i.HeapAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init
</UL>

<P><STRONG><a name="[189]"></a>HeapAllocEx</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, heap.o(i.HeapAllocEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeapAllocEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxCmdMem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxAclMem
</UL>

<P><STRONG><a name="[1f5]"></a>HeapGetAvailableSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap.o(i.HeapGetAvailableSize))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init
</UL>

<P><STRONG><a name="[1f4]"></a>HeapGetFreeStartAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap.o(i.HeapGetFreeStartAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init
</UL>

<P><STRONG><a name="[469]"></a>HeapInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap.o(i.HeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[275]"></a>InitIcache</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pan_fmc.o(i.InitIcache))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16d]"></a>LHCI_CmdHandler</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lhci_cmd.o(i.LHCI_CmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LHCI_CmdHandler &rArr; LHCI_LeControllerCmdHandler &rArr; LL_LE_CreateConn &rArr; LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_VsCmdHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRssi
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVerInfo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_MsgHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LlTxFifoAvail
</UL>

<P><STRONG><a name="[171]"></a>LHCI_ControllerCmdHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, lhci_cmd.o(i.LHCI_ControllerCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LHCI_ControllerCmdHandler &rArr; LHCI_Reset &rArr; LL_Reset &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Reset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplStatusEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToUint64
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAuthPayloadTimeout
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetAuthPayloadTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[466]"></a>LHCI_GetRxAclFifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lhci_main.o(i.LHCI_GetRxAclFifo))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_acl_nimble_handle
</UL>

<P><STRONG><a name="[467]"></a>LHCI_GetRxCmdFifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lhci_main.o(i.LHCI_GetRxCmdFifo))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_cmd_handle
</UL>

<P><STRONG><a name="[172]"></a>LHCI_InfoParamCmdHandler</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, lhci_cmd.o(i.LHCI_InfoParamCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LHCI_InfoParamCmdHandler &rArr; LHCI_SendCmdCmplEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetBdAddr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_GetHciSupCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[181]"></a>LHCI_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lhci_main.o(i.LHCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LHCI_Init &rArr; MDC_TimerConfigEx
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerConfigEx
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_AddMsgHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxFifoAvailCbackRegister
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EvtRegister
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AclRegister
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxCmdMem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxAclMem
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[185]"></a>LHCI_InitRxAclMem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lhci_main.o(i.LHCI_InitRxAclMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LHCI_InitRxAclMem &rArr; HeapAllocEx
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAllocEx
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[184]"></a>LHCI_InitRxCmdMem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lhci_main.o(i.LHCI_InitRxCmdMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LHCI_InitRxCmdMem &rArr; HeapAllocEx
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAllocEx
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[18b]"></a>LHCI_IsEvtEnabled</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lhci_main.o(i.LHCI_IsEvtEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LHCI_IsEvtEnabled &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
</UL>

<P><STRONG><a name="[18c]"></a>LHCI_IsLeEvtEnabled</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lhci_main.o(i.LHCI_IsLeEvtEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LHCI_IsLeEvtEnabled &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
</UL>

<P><STRONG><a name="[18d]"></a>LHCI_LE_SendConnCmplEvt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lhci_evt.o(i.LHCI_LE_SendConnCmplEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LHCI_LE_SendConnCmplEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
</UL>

<P><STRONG><a name="[18f]"></a>LHCI_LE_SendEnhaneConnCmplEvt</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lhci_evt.o(i.LHCI_LE_SendEnhaneConnCmplEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LHCI_LE_SendEnhaneConnCmplEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
</UL>

<P><STRONG><a name="[176]"></a>LHCI_LeControllerCmdHandler</STRONG> (Thumb, 1560 bytes, Stack size 48 bytes, lhci_cmd.o(i.LHCI_LeControllerCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LHCI_LeControllerCmdHandler &rArr; LL_LE_CreateConn &rArr; LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_GetSupStates
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_GetDefSupFeat
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplStatusEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToUint64
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNums
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_StartEncrypt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanRspData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanParam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanEnable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetRandomAddr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetPhy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetHostChnClass
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetDefaultPhy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetDefDataLen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetDataLen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvParam
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvEnable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_RemoveDeviceFromWhiteList
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadRemoteFeat
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadPhy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadMaximumDataLen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadChnMap
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqReplyHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqNegativeReplyHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_GetWhiteListSize
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_GetDefDataLen
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Encrypt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConnCancel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ConnUpd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ClearWhiteList
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_AddDeviceToWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[2f]"></a>LHCI_LlTxFifoAvail</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lhci_main.o(i.LHCI_LlTxFifoAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LHCI_LlTxFifoAvail &rArr; LHCI_CmdHandler &rArr; LHCI_LeControllerCmdHandler &rArr; LL_LE_CreateConn &rArr; LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RxAclHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lhci_main.o(i.LHCI_Init)
</UL>
<P><STRONG><a name="[2c]"></a>LHCI_MsgHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lhci_main.o(i.LHCI_MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LHCI_MsgHandler &rArr; LHCI_CmdHandler &rArr; LHCI_LeControllerCmdHandler &rArr; LL_LE_CreateConn &rArr; LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RxAclHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lhci_main.o(i.LHCI_Init)
</UL>
<P><STRONG><a name="[1b0]"></a>LHCI_NotifyRxHciPkt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lhci_main.o(i.LHCI_NotifyRxHciPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_cmd_handle
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_acl_nimble_handle
</UL>

<P><STRONG><a name="[18e]"></a>LHCI_PushEvtToTxFifo</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lhci_evt.o(i.LHCI_PushEvtToTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendNumOfCmplPktEvt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LE_SendEnhaneConnCmplEvt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LE_SendConnCmplEvt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplStatusEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
</UL>

<P><STRONG><a name="[468]"></a>LHCI_RegisterHciTxCback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lhci_main.o(i.LHCI_RegisterHciTxCback))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_init
</UL>

<P><STRONG><a name="[179]"></a>LHCI_Reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lhci_main.o(i.LHCI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LHCI_Reset &rArr; LL_Reset &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[1af]"></a>LHCI_RxAclHandler</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lhci_main.o(i.LHCI_RxAclHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LHCI_RxAclHandler &rArr; LL_SendAcl &rArr; LL_GetEffTxDataLen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendNumOfCmplPktEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_MsgHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LlTxFifoAvail
</UL>

<P><STRONG><a name="[174]"></a>LHCI_SendCmdCmplEvt</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lhci_evt.o(i.LHCI_SendCmdCmplEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LHCI_SendCmdCmplEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[178]"></a>LHCI_SendCmdCmplStatusEvt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lhci_evt.o(i.LHCI_SendCmdCmplStatusEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LHCI_SendCmdCmplStatusEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_VsCmdHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[175]"></a>LHCI_SendCmdStatusEvt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lhci_evt.o(i.LHCI_SendCmdStatusEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LHCI_SendCmdStatusEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_VsCmdHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[1b7]"></a>LHCI_SendNumOfCmplPktEvt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lhci_evt.o(i.LHCI_SendNumOfCmplPktEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LHCI_SendNumOfCmplPktEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RxAclHandler
</UL>

<P><STRONG><a name="[2e]"></a>LHCI_TxAclHandler</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lhci_acl.o(i.LHCI_TxAclHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LHCI_TxAclHandler &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lhci_main.o(i.LHCI_Init)
</UL>
<P><STRONG><a name="[2d]"></a>LHCI_TxEvtHandler</STRONG> (Thumb, 940 bytes, Stack size 32 bytes, lhci_evt.o(i.LHCI_TxEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LHCI_TxEvtHandler &rArr; LHCI_LE_SendEnhaneConnCmplEvt &rArr; LHCI_PushEvtToTxFifo &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_IsLeEvtEnabled
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_IsEvtEnabled
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LE_SendEnhaneConnCmplEvt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LE_SendConnCmplEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lhci_main.o(i.LHCI_Init)
</UL>
<P><STRONG><a name="[16e]"></a>LHCI_VsCmdHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lhci_vs.o(i.LHCI_VsCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LHCI_VsCmdHandler &rArr; BB_SetTxPower &rArr; RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetBdAddr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxPower
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdStatusEvt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplStatusEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[187]"></a>LL_AclRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_init.o(i.LL_AclRegister))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[1ba]"></a>LL_AddDeviceToWhiteList</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_whitelist.o(i.LL_AddDeviceToWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_AddDeviceToWhiteList &rArr; BdaCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetListMap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_AddDeviceToWhiteList
</UL>

<P><STRONG><a name="[36]"></a>LL_AdvPduHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ll_pdu_adv.o(i.LL_AdvPduHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LL_AdvPduHandler &rArr; LL_ConnIndHandler &rArr; LL_NotifyChnSelInd &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adv.o(i.LL_SlvAdvInit)
</UL>
<P><STRONG><a name="[223]"></a>LL_AdvPduRpaUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_adv.o(i.LL_AdvPduRpaUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[1bd]"></a>LL_BuildChanRemapTbl</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ll_conn_comm.o(i.LL_BuildChanRemapTbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_BuildChanRemapTbl
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[1be]"></a>LL_CalcWinWidening</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ll_conn_comm.o(i.LL_CalcWinWidening))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_CalcWinWidening &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_TickToUs (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetLocalSCA
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopSlvConnEvt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
</UL>

<P><STRONG><a name="[1c1]"></a>LL_CheckCmplPktNum</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ll_conn_comm.o(i.LL_CheckCmplPktNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_CheckCmplPktNum
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler
</UL>

<P><STRONG><a name="[ff]"></a>LL_ChnMapIndHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_ChnMapIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_ChnMapIndHandler &rArr; LL_SendRejectExtInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsUsedChanNumGreaterThan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>LL_ClearResolveList</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_resolvinglist.o(i.LL_ClearResolveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ClearResolveList &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>

<P><STRONG><a name="[1c8]"></a>LL_ClearWhiteList</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_whitelist.o(i.LL_ClearWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ClearWhiteList &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ClearWhiteList
</UL>

<P><STRONG><a name="[1c5]"></a>LL_ConnEvtAdjust</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, ll_pdu_conn.o(i.LL_ConnEvtAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_ConnEvtAdjust &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnUpdCmpl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_BuildChanRemapTbl
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustDataChannelIndexEx (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingSubUs (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdIndHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChnMapIndHandler
</UL>

<P><STRONG><a name="[1cf]"></a>LL_ConnEvtStopHandler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, ll_conn_comm.o(i.LL_ConnEvtStopHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_ConnEvtStopHandler &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckCmplPktNum
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopSlvConnEvt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstConnEvtHandler (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>LL_ConnIndHandler</STRONG> (Thumb, 988 bytes, Stack size 136 bytes, ll_pdu_adv.o(i.LL_ConnIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LL_ConnIndHandler &rArr; LL_NotifyChnSelInd &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyChnSelInd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AllocConnCtxEx (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SelectNextChanIndex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_BuildChanRemapTbl
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPduDurationTime (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsConnExisted
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvPduHandler
</UL>

<P><STRONG><a name="[1dc]"></a>LL_ConnInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ll_conn.o(i.LL_ConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ConnInit &rArr; LL_InitConnMem &rArr; HeapAllocEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Register
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_ConnInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[fe]"></a>LL_ConnUpdIndHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_ConnUpdIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_ConnUpdIndHandler &rArr; LL_SendRejectExtInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>LL_DataLenReqHandler</STRONG> (Thumb, 270 bytes, Stack size 80 bytes, ll_pdu_conn.o(i.LL_DataLenReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LL_DataLenReqHandler &rArr; LL_SendDataLenRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenRsp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>LL_DataLenRspHandler</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, ll_pdu_conn.o(i.LL_DataLenRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_DataLenRspHandler &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>LL_DecodeCtrlPdu</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_DecodeCtrlPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_DecodeCtrlPdu &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToUint64
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
</UL>

<P><STRONG><a name="[1e3]"></a>LL_DisconnCmplHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ll_conn_comm.o(i.LL_DisconnCmplHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_DisconnCmplHandler &rArr; LL_NotifyDisconnCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDisconnCmpl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveInvalidItem (via Veneer)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_ItemRemovePostHandler (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[16f]"></a>LL_Disconnect</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ll_main.o(i.LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_Disconnect &rArr; LL_SendTerminateInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[101]"></a>LL_EncReqHandler</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, ll_pdu_conn.o(i.LL_EncReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LL_EncReqHandler &rArr; LL_SendEncRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncRsp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNums
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>LL_EncRspHandler</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ll_pdu_conn.o(i.LL_EncRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_EncRspHandler &rArr; AES_Encrypt &rArr; _rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopTimer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStart
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>LL_EvtRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_init.o(i.LL_EvtRegister))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[106]"></a>LL_FeatReqHandler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_FeatReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_FeatReqHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>LL_FeatRspHandler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_FeatRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_FeatRspHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteFeatCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>LL_GenerateRPA</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ll_resolvinglist.o(i.LL_GenerateRPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GenerateRPA &rArr; PrandNums
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNums
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UpdateAllRpa
</UL>

<P><STRONG><a name="[17a]"></a>LL_GetAuthPayloadTimeout</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ll_main.o(i.LL_GetAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GetAuthPayloadTimeout &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[180]"></a>LL_GetBdAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_main.o(i.LL_GetBdAddr))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
</UL>

<P><STRONG><a name="[203]"></a>LL_GetCurUsedPhy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_conn_comm.o(i.LL_GetCurUsedPhy))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadPhy
</UL>

<P><STRONG><a name="[248]"></a>LL_GetEffTxDataLen</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ll_conn.o(i.LL_GetEffTxDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GetEffTxDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxAclDataPendingHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl
</UL>

<P><STRONG><a name="[1bf]"></a>LL_GetLocalSCA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_int.o(i.LL_GetLocalSCA))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening
</UL>

<P><STRONG><a name="[23b]"></a>LL_GetSuppPhys</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ll_conn_comm.o(i.LL_GetSuppPhys))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
</UL>

<P><STRONG><a name="[17c]"></a>LL_GetVersion</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ll_main.o(i.LL_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
</UL>

<P><STRONG><a name="[200]"></a>LL_GetWhiteListSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_whitelist.o(i.LL_GetWhiteListSize))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_GetWhiteListSize
</UL>

<P><STRONG><a name="[1ec]"></a>LL_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ll_init.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LL_Init &rArr; BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_AddMsgHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhiteListInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstScanInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInitiatorInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[1d6]"></a>LL_InitConnCtx</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, ll_conn.o(i.LL_InitConnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_InitConnCtx &rArr; MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[1f3]"></a>LL_InitConnCtxMem</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ll_conn.o(i.LL_InitConnCtxMem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1dd]"></a>LL_InitConnMem</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ll_conn.o(i.LL_InitConnMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_InitConnMem &rArr; HeapAllocEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetFreeStartAddr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetAvailableSize
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAlloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAllocEx
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnInit
</UL>

<P><STRONG><a name="[1f7]"></a>LL_InitScanMem</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ll_scan.o(i.LL_InitScanMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_InitScanMem &rArr; BB_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstScanInit
</UL>

<P><STRONG><a name="[1f8]"></a>LL_InitWhiteListMem</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ll_whitelist.o(i.LL_InitWhiteListMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_InitWhiteListMem &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_ListMemAlloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhiteListInit
</UL>

<P><STRONG><a name="[1d4]"></a>LL_IsConnExisted</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ll_conn_comm.o(i.LL_IsConnExisted))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_IsConnExisted &rArr; xmemcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
</UL>

<P><STRONG><a name="[4d6]"></a>LL_IsPmEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_pm.o(i.LL_IsPmEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
</UL>

<P><STRONG><a name="[1c4]"></a>LL_IsUsedChanNumGreaterThan2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_conn_comm.o(i.LL_IsUsedChanNumGreaterThan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_IsUsedChanNumGreaterThan2 &rArr; MathGetNumBitsSetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MathGetNumBitsSetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChnMapIndHandler
</UL>

<P><STRONG><a name="[19c]"></a>LL_LE_AddDeviceToWhiteList</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_AddDeviceToWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_LE_AddDeviceToWhiteList &rArr; LL_AddDeviceToWhiteList &rArr; BdaCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AddDeviceToWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[19b]"></a>LL_LE_ClearWhiteList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_ClearWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_LE_ClearWhiteList &rArr; LL_ClearWhiteList &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[19e]"></a>LL_LE_ConnUpd</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ll_main.o(i.LL_LE_ConnUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_LE_ConnUpd &rArr; LL_SendConnUpdateInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnUpdateInd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[198]"></a>LL_LE_CreateConn</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_CreateConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LL_LE_CreateConn &rArr; LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsConnExisted
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[199]"></a>LL_LE_CreateConnCancel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_CreateConnCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LL_LE_CreateConnCancel &rArr; LL_MstCreateConnCancel &rArr; SCH_RemoveByEx &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a2]"></a>LL_LE_Encrypt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_LE_Encrypt &rArr; AES_Encrypt &rArr; _rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a9]"></a>LL_LE_GetDefDataLen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_main.o(i.LL_LE_GetDefDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[19a]"></a>LL_LE_GetWhiteListSize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_GetWhiteListSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LE_GetWhiteListSize
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetWhiteListSize
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a6]"></a>LL_LE_LtkReqNegativeReplyHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_LtkReqNegativeReplyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_LE_LtkReqNegativeReplyHandler &rArr; LL_SendRejectInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectInd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a5]"></a>LL_LE_LtkReqReplyHandler</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ll_main.o(i.LL_LE_LtkReqReplyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_LE_LtkReqReplyHandler &rArr; AES_Encrypt &rArr; _rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a0]"></a>LL_LE_ReadChnMap</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ll_main.o(i.LL_LE_ReadChnMap))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1ab]"></a>LL_LE_ReadMaximumDataLen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_ReadMaximumDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LE_ReadMaximumDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1ac]"></a>LL_LE_ReadPhy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_ReadPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_LE_ReadPhy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetCurUsedPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a1]"></a>LL_LE_ReadRemoteFeat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_ReadRemoteFeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_LE_ReadRemoteFeat &rArr; LL_SendSlvFeatureReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[19d]"></a>LL_LE_RemoveDeviceFromWhiteList</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_RemoveDeviceFromWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_LE_RemoveDeviceFromWhiteList &rArr; LL_RemoveDeviceFromWhiteList &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoveDeviceFromWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[193]"></a>LL_LE_SetAdvData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_SetAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_LE_SetAdvData &rArr; LL_SetAdvData &rArr; xmemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvData
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[195]"></a>LL_LE_SetAdvEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_SetAdvEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LL_LE_SetAdvEnable &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[192]"></a>LL_LE_SetAdvParam</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ll_main.o(i.LL_LE_SetAdvParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_LE_SetAdvParam &rArr; LL_SetAdvParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a8]"></a>LL_LE_SetDataLen</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_SetDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_LE_SetDataLen &rArr; LL_SendDataLenReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1aa]"></a>LL_LE_SetDefDataLen</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, ll_main.o(i.LL_LE_SetDefDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LE_SetDefDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1ad]"></a>LL_LE_SetDefaultPhy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_SetDefaultPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LE_SetDefaultPhy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[19f]"></a>LL_LE_SetHostChnClass</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ll_main.o(i.LL_LE_SetHostChnClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LL_LE_SetHostChnClass &rArr; LL_SendConnChnMapInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnChnMapInd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1ae]"></a>LL_LE_SetPhy</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ll_main.o(i.LL_LE_SetPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_LE_SetPhy &rArr; LL_SendPhyReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[191]"></a>LL_LE_SetRandomAddr</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ll_main.o(i.LL_LE_SetRandomAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LE_SetRandomAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[197]"></a>LL_LE_SetScanEnable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_SetScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LL_LE_SetScanEnable &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[196]"></a>LL_LE_SetScanParam</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, ll_main.o(i.LL_LE_SetScanParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_LE_SetScanParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanParam
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[194]"></a>LL_LE_SetScanRspData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_main.o(i.LL_LE_SetScanRspData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_LE_SetScanRspData &rArr; LL_SetScanRspData &rArr; xmemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_IsLegCmdAllowed
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanRspData
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1a4]"></a>LL_LE_StartEncrypt</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, ll_main.o(i.LL_LE_StartEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_LE_StartEncrypt &rArr; LL_SendEncReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNums
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[1ed]"></a>LL_LlInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ll_init.o(i.LL_LlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_LlInit &rArr; LMGR_Init &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetLocalSCA
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1e8]"></a>LL_LlRspTimerStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ll_conn.o(i.LL_LlRspTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_LlRspTimerStart &rArr; MDC_TimerStartSec &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReqHandler
</UL>

<P><STRONG><a name="[1e1]"></a>LL_LlRspTimerStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_conn.o(i.LL_LlRspTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_LlRspTimerStop &rArr; MDC_TimerStartSec &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectExtIndHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PingRspHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatRspHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenRspHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_VerIndHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UnKnownRspHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectIndHandler
</UL>

<P><STRONG><a name="[31]"></a>LL_MsgHandler</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, ll_init.o(i.LL_MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LL_MsgHandler &rArr; LL_SlvDirectAdvTimeoutHandler &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueReset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxAclDataPendingHandler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopAuthTimer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartAuthTimer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingReq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyAuthPayloadTimeout
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Get32kRCMeasureValue (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UpdateAllRpa
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvDirectAdvTimeoutHandler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvDataUpdate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueReset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxDataChnPktHandler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCreateCancel
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnResetCommon
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnCancel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvPduRpaUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_init.o(i.LL_Init)
</UL>
<P><STRONG><a name="[1fe]"></a>LL_MstCreateConn</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, ll_scan.o(i.LL_MstCreateConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LL_MstCreateConn &rArr; LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackAdvPduHdr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeHopInc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAccessAddr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackConnInd
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConn
</UL>

<P><STRONG><a name="[1ff]"></a>LL_MstCreateConnCancel</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, ll_scan.o(i.LL_MstCreateConnCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LL_MstCreateConnCancel &rArr; SCH_RemoveByEx &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCmpl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConnCancel
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[230]"></a>LL_MstCreateConnReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ll_scan.o(i.LL_MstCreateConnReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LL_MstCreateConnReset &rArr; SCH_RemoveByEx &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>

<P><STRONG><a name="[225]"></a>LL_MstCreateConnResetCommon</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_scan.o(i.LL_MstCreateConnResetCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_MstCreateConnResetCommon &rArr; MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[46b]"></a>LL_MstInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_conn_mst.o(i.LL_MstInit))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[1f2]"></a>LL_MstInitiatorInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ll_scan.o(i.LL_MstInitiatorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_MstInitiatorInit &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Register
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1f1]"></a>LL_MstScanInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_scan.o(i.LL_MstScanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_MstScanInit &rArr; LL_InitScanMem &rArr; BB_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Register
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_MstScanInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitScanMem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[232]"></a>LL_NewTxPowerReqHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_int.o(i.LL_NewTxPowerReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_NewTxPowerReqHandler &rArr; BB_SetTxPower &rArr; RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopSlvConnEvt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstConnEvtHandler (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler (via Veneer)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop (via Veneer)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStop (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanEvtHandler (via Veneer)
</UL>

<P><STRONG><a name="[219]"></a>LL_NotifyAuthPayloadTimeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_conn.o(i.LL_NotifyAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_NotifyAuthPayloadTimeout &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[1db]"></a>LL_NotifyChnSelInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyChnSelInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyChnSelInd &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[22f]"></a>LL_NotifyConnCmpl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyConnCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyConnCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvDirectAdvTimeoutHandler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCreateCancel
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnCancel
</UL>

<P><STRONG><a name="[226]"></a>LL_NotifyConnCreateCancel</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ll_scan.o(i.LL_NotifyConnCreateCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_NotifyConnCreateCancel &rArr; LL_NotifyConnCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCmpl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[233]"></a>LL_NotifyConnTxEnd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_conn.o(i.LL_NotifyConnTxEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_NotifyConnTxEnd &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
</UL>

<P><STRONG><a name="[1cc]"></a>LL_NotifyConnUpdCmpl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyConnUpdCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyConnUpdCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
</UL>

<P><STRONG><a name="[1ce]"></a>LL_NotifyDataLenChangeCmpl</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ll_conn.o(i.LL_NotifyDataLenChangeCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenRspHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenReqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
</UL>

<P><STRONG><a name="[1e4]"></a>LL_NotifyDisconnCmpl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyDisconnCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyDisconnCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler
</UL>

<P><STRONG><a name="[234]"></a>LL_NotifyEncChangeCmpl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyEncChangeCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyEncChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectExtIndHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectIndHandler
</UL>

<P><STRONG><a name="[235]"></a>LL_NotifyEncKeyRefreshCmpl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyEncKeyRefreshCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyEncKeyRefreshCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
</UL>

<P><STRONG><a name="[236]"></a>LL_NotifyHandleTxQueue</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_conn.o(i.LL_NotifyHandleTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_NotifyHandleTxQueue &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReqHandler
</UL>

<P><STRONG><a name="[1cd]"></a>LL_NotifyPhyUpdCmpl</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ll_conn.o(i.LL_NotifyPhyUpdCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_NotifyPhyUpdCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RejectExtIndHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetPhy
</UL>

<P><STRONG><a name="[1ea]"></a>LL_NotifyReadRemoteFeatCmpl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ll_conn.o(i.LL_NotifyReadRemoteFeatCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_NotifyReadRemoteFeatCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatRspHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UnKnownRspHandler
</UL>

<P><STRONG><a name="[237]"></a>LL_NotifyReadRemoteVerCmpl</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ll_conn.o(i.LL_NotifyReadRemoteVerCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_NotifyReadRemoteVerCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_VerIndHandler
</UL>

<P><STRONG><a name="[22c]"></a>LL_PackAdvPduHdr</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ll_int.o(i.LL_PackAdvPduHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_PackAdvPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[22d]"></a>LL_PackConnInd</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, ll_scan.o(i.LL_PackConnInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_PackConnInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[249]"></a>LL_PackPduHdr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ll_pdu_conn.o(i.LL_PackPduHdr))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxAclDataPendingHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl
</UL>

<P><STRONG><a name="[108]"></a>LL_PauseEncReqHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ll_pdu_conn.o(i.LL_PauseEncReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_PauseEncReqHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>LL_PauseEncRspHandler</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ll_pdu_conn.o(i.LL_PauseEncRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_PauseEncRspHandler &rArr; LL_SendEncReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncRsp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>LL_PduHandler</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_PduHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_PduHandler &rArr; LL_DecodeCtrlPdu &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgEnqueue
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DecodeCtrlPdu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxDataChnPktHandler
</UL>

<P><STRONG><a name="[112]"></a>LL_PhyReqHandler</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ll_pdu_conn.o(i.LL_PhyReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LL_PhyReqHandler &rArr; LL_SendRejectExtInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyUpdInd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyRsp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetSuppPhys
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>LL_PhyRspHandler</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_PhyRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_PhyRspHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyUpdInd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetSuppPhys
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>LL_PhyUpdIndHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_PhyUpdIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_PhyUpdIndHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>LL_PingReqHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_pdu_conn.o(i.LL_PingReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_PingReqHandler &rArr; LL_SendPingRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>LL_PingRspHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_pdu_conn.o(i.LL_PingRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_PingRspHandler &rArr; LL_LlRspTimerStop &rArr; MDC_TimerStartSec &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[46d]"></a>LL_PmInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_pm.o(i.LL_PmInit))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[170]"></a>LL_ReadRemoteVerInfo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ll_main.o(i.LL_ReadRemoteVerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_ReadRemoteVerInfo &rArr; LL_SendVerInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[173]"></a>LL_ReadRssi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_main.o(i.LL_ReadRssi))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_CmdHandler
</UL>

<P><STRONG><a name="[10d]"></a>LL_RejectExtIndHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_RejectExtIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LL_RejectExtIndHandler &rArr; LL_NotifyPhyUpdCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncChangeCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>LL_RejectIndHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_RejectIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_RejectIndHandler &rArr; LL_NotifyEncChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncChangeCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>LL_RemoveDeviceFromWhiteList</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ll_whitelist.o(i.LL_RemoveDeviceFromWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_RemoveDeviceFromWhiteList &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetListMap
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_RemoveDeviceFromWhiteList
</UL>

<P><STRONG><a name="[1b5]"></a>LL_Reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ll_main.o(i.LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LL_Reset &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_ConnInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_SlvAdvInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_PrivReset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_MstScanInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnReset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearWhiteList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearResolveList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Reset
</UL>

<P><STRONG><a name="[220]"></a>LL_RxDataChnPktHandler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_RxDataChnPktHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LL_RxDataChnPktHandler &rArr; LL_PduHandler &rArr; LL_DecodeCtrlPdu &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[21f]"></a>LL_RxQueueHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_RxQueueHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LL_RxQueueHandler &rArr; LL_PduHandler &rArr; LL_DecodeCtrlPdu &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[21d]"></a>LL_RxQueueReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_pdu_conn.o(i.LL_RxQueueReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_RxQueueReset &rArr; MsgFree &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[24d]"></a>LL_ScanDupFilterItemUpdate</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ll_pdu_scan.o(i.LL_ScanDupFilterItemUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ScanDupFilterItemUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport
</UL>

<P><STRONG><a name="[34]"></a>LL_ScanPduHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ll_pdu_scan.o(i.LL_ScanPduHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ScanPduHandler &rArr; LL_SendMdcEvt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetRxBuf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_scan.o(i.LL_MstScanInit)
</UL>
<P><STRONG><a name="[1d7]"></a>LL_SelectNextChanIndex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ll_conn_comm.o(i.LL_SelectNextChanIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SelectNextChanIndex &rArr; LL_GetPrand
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrand (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[1b6]"></a>LL_SendAcl</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ll_conn.o(i.LL_SendAcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_SendAcl &rArr; LL_GetEffTxDataLen
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackPduHdr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetEffTxDataLen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RxAclHandler
</UL>

<P><STRONG><a name="[20b]"></a>LL_SendConnChnMapInd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ll_conn.o(i.LL_SendConnChnMapInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_SendConnChnMapInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetHostChnClass
</UL>

<P><STRONG><a name="[1fc]"></a>LL_SendConnUpdateInd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendConnUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendConnUpdateInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ConnUpd
</UL>

<P><STRONG><a name="[20a]"></a>LL_SendDataLenReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ll_conn.o(i.LL_SendDataLenReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_SendDataLenReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetDataLen
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[1e0]"></a>LL_SendDataLenRsp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendDataLenRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendDataLenRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DataLenReqHandler
</UL>

<P><STRONG><a name="[211]"></a>LL_SendEncReq</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ll_conn.o(i.LL_SendEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_SendEncReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncRspHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_StartEncrypt
</UL>

<P><STRONG><a name="[1e5]"></a>LL_SendEncRsp</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ll_conn.o(i.LL_SendEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_SendEncRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
</UL>

<P><STRONG><a name="[24f]"></a>LL_SendEvt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_init.o(i.LL_SendEvt))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport
</UL>

<P><STRONG><a name="[204]"></a>LL_SendFeatReq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendFeatReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendFeatReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadRemoteFeat
</UL>

<P><STRONG><a name="[1e9]"></a>LL_SendFeatRsp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendFeatRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendFeatRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatReqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvFeatReqHandler
</UL>

<P><STRONG><a name="[1d2]"></a>LL_SendMdcEvt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_int.o(i.LL_SendMdcEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SendMdcEvt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Start32kRCMeasure (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler (via Veneer)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveInvalidItem (via Veneer)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_ItemRemovePostHandler (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxDataChnPktHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanPduHandler
</UL>

<P><STRONG><a name="[210]"></a>LL_SendPauseEncReq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPauseEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPauseEncReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_StartEncrypt
</UL>

<P><STRONG><a name="[238]"></a>LL_SendPauseEncRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPauseEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPauseEncRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncRspHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncReqHandler
</UL>

<P><STRONG><a name="[20c]"></a>LL_SendPhyReq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPhyReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPhyReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetPhy
</UL>

<P><STRONG><a name="[23c]"></a>LL_SendPhyRsp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPhyRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPhyRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
</UL>

<P><STRONG><a name="[23d]"></a>LL_SendPhyUpdInd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPhyUpdInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPhyUpdInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
</UL>

<P><STRONG><a name="[217]"></a>LL_SendPingReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPingReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[23e]"></a>LL_SendPingRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendPingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendPingRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PingReqHandler
</UL>

<P><STRONG><a name="[24a]"></a>LL_SendPkt</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, ll_conn.o(i.LL_SendPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgEnqueue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackPduHdr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncRsp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncReq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectInd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingRsp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingReq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyUpdInd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyRsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncRsp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncRsp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenRsp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnUpdateInd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnChnMapInd
</UL>

<P><STRONG><a name="[1da]"></a>LL_SendQueueMsg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_int.o(i.LL_SendQueueMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendQueueMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteVerCmpl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteFeatCmpl
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyHandleTxQueue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncKeyRefreshCmpl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncChangeCmpl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDisconnCmpl
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnUpdCmpl
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnTxEnd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCmpl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyChnSelInd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyAuthPayloadTimeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[1c6]"></a>LL_SendRejectExtInd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ll_conn.o(i.LL_SendRejectExtInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LL_SendRejectExtInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyReqHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdIndHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChnMapIndHandler
</UL>

<P><STRONG><a name="[201]"></a>LL_SendRejectInd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendRejectInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendRejectInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqNegativeReplyHandler
</UL>

<P><STRONG><a name="[221]"></a>LL_SendScanReport</STRONG> (Thumb, 540 bytes, Stack size 160 bytes, ll_pdu_scan.o(i.LL_SendScanReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LL_SendScanReport &rArr; LL_ScanDupFilterItemUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CalcRssi
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEvt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanDupFilterItemUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[205]"></a>LL_SendSlvFeatureReq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendSlvFeatureReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendSlvFeatureReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_ReadRemoteFeat
</UL>

<P><STRONG><a name="[202]"></a>LL_SendStartEncReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendStartEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendStartEncReq &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqReplyHandler
</UL>

<P><STRONG><a name="[250]"></a>LL_SendStartEncRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendStartEncRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncRspHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReqHandler
</UL>

<P><STRONG><a name="[1c2]"></a>LL_SendTerminateInd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendTerminateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendTerminateInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdIndHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChnMapIndHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect
</UL>

<P><STRONG><a name="[1c3]"></a>LL_SendUnknownRsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendUnknownRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyUpdIndHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PhyRspHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncReqHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatRspHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FeatReqHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DecodeCtrlPdu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdIndHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChnMapIndHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvFeatReqHandler
</UL>

<P><STRONG><a name="[23f]"></a>LL_SendVerInd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ll_conn.o(i.LL_SendVerInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LL_SendVerInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVerInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_VerIndHandler
</UL>

<P><STRONG><a name="[207]"></a>LL_SetAdvData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_adv.o(i.LL_SetAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_SetAdvData &rArr; xmemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvData
</UL>

<P><STRONG><a name="[208]"></a>LL_SetAdvEnable</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, ll_adv.o(i.LL_SetAdvEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvEnable
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvDirectAdvTimeoutHandler
</UL>

<P><STRONG><a name="[209]"></a>LL_SetAdvParam</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_adv.o(i.LL_SetAdvParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetAdvParam
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvParam
</UL>

<P><STRONG><a name="[17b]"></a>LL_SetAuthPayloadTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_main.o(i.LL_SetAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_SetAuthPayloadTimeout &rArr; MDC_TimerStartMs &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_ControllerCmdHandler
</UL>

<P><STRONG><a name="[1b9]"></a>LL_SetBdAddr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ll_main.o(i.LL_SetBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetBdAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_misc_set_bd_addr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_VsCmdHandler
</UL>

<P><STRONG><a name="[212]"></a>LL_SetLocalSCA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_int.o(i.LL_SetLocalSCA))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlInit
</UL>

<P><STRONG><a name="[20d]"></a>LL_SetScanEnable</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ll_scan.o(i.LL_SetScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LL_SetScanEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScan (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanEnable
</UL>

<P><STRONG><a name="[20e]"></a>LL_SetScanParam</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_scan.o(i.LL_SetScanParam))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanParam
</UL>

<P><STRONG><a name="[20f]"></a>LL_SetScanRspData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_adv.o(i.LL_SetScanRspData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SetScanRspData &rArr; xmemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanRspData
</UL>

<P><STRONG><a name="[222]"></a>LL_SlvAdvDataUpdate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ll_adv.o(i.LL_SlvAdvDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_SlvAdvDataUpdate &rArr; xmemcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[1f0]"></a>LL_SlvAdvInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, ll_adv.o(i.LL_SlvAdvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SlvAdvInit &rArr; LMGR_SlvAdvInit &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Register
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_MemAlloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_SlvAdvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[224]"></a>LL_SlvDirectAdvTimeoutHandler</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, ll_adv.o(i.LL_SlvDirectAdvTimeoutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LL_SlvDirectAdvTimeoutHandler &rArr; LL_SetAdvEnable &rArr; SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCmpl
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_IsTimeExpired (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[10c]"></a>LL_SlvFeatReqHandler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_SlvFeatReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_SlvFeatReqHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[46c]"></a>LL_SlvInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_conn_slv.o(i.LL_SlvInit))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[218]"></a>LL_StartAuthTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_conn.o(i.LL_StartAuthTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_StartAuthTimer &rArr; MDC_TimerStartMs &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[103]"></a>LL_StartEncReqHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_StartEncReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_StartEncReqHandler &rArr; LL_SendUnknownRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopTimer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncRsp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyHandleTxQueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>LL_StartEncRspHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_StartEncRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_StartEncRspHandler &rArr; LL_SendStartEncRsp &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncRsp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyHandleTxQueue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncKeyRefreshCmpl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncChangeCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>LL_StopAuthTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_conn.o(i.LL_StopAuthTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_StopAuthTimer &rArr; MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[253]"></a>LL_StopSlvConnEvt</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ll_conn_slv.o(i.LL_StopSlvConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LL_StopSlvConnEvt &rArr; LL_ConnEvtStopHandler &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvConnEvtHandler (via Veneer)
</UL>

<P><STRONG><a name="[1e7]"></a>LL_StopTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_conn.o(i.LL_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_StopTimer &rArr; MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncReqHandler
</UL>

<P><STRONG><a name="[100]"></a>LL_TerminateIndHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_pdu_conn.o(i.LL_TerminateIndHandler))
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>LL_TxAclDataPendingHandler</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ll_conn.o(i.LL_TxAclDataPendingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_TxAclDataPendingHandler &rArr; LL_GetEffTxDataLen
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackPduHdr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetEffTxDataLen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[188]"></a>LL_TxFifoAvailCbackRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_init.o(i.LL_TxFifoAvailCbackRegister))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[216]"></a>LL_TxQueueHandler</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ll_conn.o(i.LL_TxQueueHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_TxQueueHandler &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PackPduHdr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[21c]"></a>LL_TxQueueReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_conn.o(i.LL_TxQueueReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TxQueueReset &rArr; MsgFree &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[105]"></a>LL_UnKnownRspHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_pdu_conn.o(i.LL_UnKnownRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_UnKnownRspHandler &rArr; LL_NotifyReadRemoteFeatCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteFeatCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>LL_UpdateAllRpa</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ll_resolvinglist.o(i.LL_UpdateAllRpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_UpdateAllRpa &rArr; LL_GenerateRPA &rArr; PrandNums
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GenerateRPA
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[10a]"></a>LL_VerIndHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ll_pdu_conn.o(i.LL_VerIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LL_VerIndHandler &rArr; LL_SendVerInd &rArr; LL_SendPkt &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteVerCmpl
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pdu_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>LL_WhiteListInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_whitelist.o(i.LL_WhiteListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_WhiteListInit &rArr; LL_InitWhiteListMem &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitWhiteListMem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1de]"></a>LMGR_ConnInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lmgr_conn.o(i.LMGR_ConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMGR_ConnInit &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>

<P><STRONG><a name="[190]"></a>LMGR_GetDefSupFeat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmgr_main.o(i.LMGR_GetDefSupFeat))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[17e]"></a>LMGR_GetHciSupCmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmgr_main.o(i.LMGR_GetHciSupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
</UL>

<P><STRONG><a name="[1a7]"></a>LMGR_GetSupStates</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmgr_main.o(i.LMGR_GetSupStates))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
</UL>

<P><STRONG><a name="[213]"></a>LMGR_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lmgr_main.o(i.LMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LMGR_Init &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlInit
</UL>

<P><STRONG><a name="[1fd]"></a>LMGR_IsLegCmdAllowed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmgr_main.o(i.LMGR_IsLegCmdAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanRspData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanParam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetScanEnable
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvParam
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvEnable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetAdvData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_CreateConn
</UL>

<P><STRONG><a name="[231]"></a>LMGR_MstScanInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lmgr_scan.o(i.LMGR_MstScanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LMGR_MstScanInit &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstScanInit
</UL>

<P><STRONG><a name="[243]"></a>LMGR_PrivReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmgr_priv.o(i.LMGR_PrivReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LMGR_PrivReset &rArr; MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>

<P><STRONG><a name="[242]"></a>LMGR_SlvAdvInit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lmgr_adv.o(i.LMGR_SlvAdvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LMGR_SlvAdvInit &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvInit
</UL>

<P><STRONG><a name="[464]"></a>LP_SetSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pan_lp.o(i.LP_SetSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
</UL>

<P><STRONG><a name="[182]"></a>MDC_AddMsgHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mdc.o(i.MDC_AddMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDC_AddMsgHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[254]"></a>MDC_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdc.o(i.MDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDC_Init &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[46e]"></a>MDC_RegisterSemphrCback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdc.o(i.MDC_RegisterSemphrCback))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ll_register_semphr_cback
</UL>

<P><STRONG><a name="[1b1]"></a>MDC_SendEvent</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mdc.o(i.MDC_SendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_NotifyRxHciPkt
</UL>

<P><STRONG><a name="[24b]"></a>MDC_SendQueueMsg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdc.o(i.MDC_SendQueueMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgEnqueue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg
</UL>

<P><STRONG><a name="[257]"></a>MDC_Start</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, mdc.o(i.MDC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MDC_Start &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate (via Veneer)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_handle (via Veneer)
</UL>

<P><STRONG><a name="[22b]"></a>MDC_TimerConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stimer.o(i.MDC_TimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDC_TimerConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[183]"></a>MDC_TimerConfigEx</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, stimer.o(i.MDC_TimerConfigEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MDC_TimerConfigEx
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
</UL>

<P><STRONG><a name="[259]"></a>MDC_TimerExpired</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stimer.o(i.MDC_TimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDC_TimerExpired &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start
</UL>

<P><STRONG><a name="[46a]"></a>MDC_TimerInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stimer.o(i.MDC_TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[25b]"></a>MDC_TimerReady</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mdc.o(i.MDC_TimerReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDC_TimerReady
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>MDC_TimerStartMs</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stimer.o(i.MDC_TimerStartMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MDC_TimerStartMs &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartAuthTimer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RxAclHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAuthPayloadTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[214]"></a>MDC_TimerStartSec</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stimer.o(i.MDC_TimerStartSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MDC_TimerStartSec &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncReq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingReq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyRsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyReq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStart
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[1b4]"></a>MDC_TimerStop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stimer.o(i.MDC_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDC_TimerStop &rArr; QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopTimer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopAuthTimer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlRspTimerStop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_PrivReset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnReset
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnResetCommon
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnCancel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[4c7]"></a>MathGetNumBitsSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, math.o(i.MathGetNumBitsSet))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
</UL>

<P><STRONG><a name="[1fb]"></a>MathGetNumBitsSetEx</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, math.o(i.MathGetNumBitsSetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MathGetNumBitsSetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsUsedChanNumGreaterThan2
</UL>

<P><STRONG><a name="[1d9]"></a>MsgAlloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, msg.o(i.MsgAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgAlloc &rArr; PoolBufAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteVerCmpl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteFeatCmpl
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyHandleTxQueue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncKeyRefreshCmpl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyEncChangeCmpl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDisconnCmpl
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnUpdCmpl
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnTxEnd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnCmpl
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyChnSelInd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyAuthPayloadTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler (via Veneer)
</UL>

<P><STRONG><a name="[244]"></a>MsgDequeue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, msg.o(i.MsgDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgDequeue &rArr; QUEUE_Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueReset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueReset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueHandler
</UL>

<P><STRONG><a name="[23a]"></a>MsgEnqueue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msg.o(i.MsgEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Enquene
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendQueueMsg
</UL>

<P><STRONG><a name="[245]"></a>MsgFree</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msg.o(i.MsgFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgFree &rArr; PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueReset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueReset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxQueueHandler
</UL>

<P><STRONG><a name="[271]"></a>PW_ParamsSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_panseries.o(i.PW_ParamsSet))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
</UL>

<P><STRONG><a name="[1b2]"></a>PoolBufAlloc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pool_buf.o(i.PoolBufAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PoolBufAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncRsp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncReq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectInd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingRsp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingReq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyUpdInd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyRsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncRsp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncRsp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenRsp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnUpdateInd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnChnMapInd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxAclHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
</UL>

<P><STRONG><a name="[1b3]"></a>PoolBufFree</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pool_buf.o(i.PoolBufFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PoolBufFree
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgFree
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendVerInd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendUnknownRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendTerminateInd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncRsp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendStartEncReq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectInd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendRejectExtInd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingRsp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPingReq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyUpdInd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyRsp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPhyReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncRsp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPauseEncReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncRsp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenRsp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendDataLenReq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnUpdateInd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnChnMapInd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxAclHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt
</UL>

<P><STRONG><a name="[25f]"></a>PoolBufInit</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, pool_buf.o(i.PoolBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PoolBufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetFreeStartAddr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetAvailableSize
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAlloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
</UL>

<P><STRONG><a name="[228]"></a>PrandNum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, math.o(i.PrandNum))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler (via Veneer)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AdjustEventAnchorPoint (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[1a3]"></a>PrandNums</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, math.o(i.PrandNums))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrandNums
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_StartEncrypt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GenerateRPA
</UL>

<P><STRONG><a name="[25d]"></a>QUEUE_Dequeue</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, xqueue.o(i.QUEUE_Dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QUEUE_Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgDequeue
</UL>

<P><STRONG><a name="[25e]"></a>QUEUE_Enquene</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xqueue.o(i.QUEUE_Enquene))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgEnqueue
</UL>

<P><STRONG><a name="[25c]"></a>QUEUE_InsertElement</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, xqueue.o(i.QUEUE_InsertElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerInsert (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertItemToQueue (via Veneer)
</UL>

<P><STRONG><a name="[260]"></a>QUEUE_PushElement</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xqueue.o(i.QUEUE_PushElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QUEUE_PushElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertAdvItemToQueue (via Veneer)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertItemToQueue (via Veneer)
</UL>

<P><STRONG><a name="[25a]"></a>QUEUE_RemoveElement</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xqueue.o(i.QUEUE_RemoveElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QUEUE_RemoveElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerInsert (via Veneer)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerRemove (via Veneer)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerExpired
</UL>

<P><STRONG><a name="[24c]"></a>RF_CalcRssi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(i.RF_CalcRssi))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport
</UL>

<P><STRONG><a name="[261]"></a>RF_PhyConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, rf_phy.o(i.RF_PhyConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init_from_info
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_data_is_valid
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhySeqRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[148]"></a>RF_PhyInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rf_phy.o(i.RF_PhyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPhySpiClk (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_code
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_info_tlv_data
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyCfgTimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init
</UL>

<P><STRONG><a name="[262]"></a>RF_PhySeqRAMInit</STRONG> (Thumb, 588 bytes, Stack size 12 bytes, rf_phy.o(i.RF_PhySeqRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_PhySeqRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyConfig
</UL>

<P><STRONG><a name="[14c]"></a>RF_SetPowerLevel</STRONG> (Thumb, 870 bytes, Stack size 40 bytes, rf_phy.o(i.RF_SetPowerLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_read_from_type
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_data_is_valid
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhySeqRAMInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxPower
</UL>

<P><STRONG><a name="[22e]"></a>SCH_AddItem</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sch_main.o(i.SCH_AddItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCH_AddItem &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn
</UL>

<P><STRONG><a name="[1ee]"></a>SCH_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, sch_main.o(i.SCH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCH_Init &rArr; xmemset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetFreeStartAddr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapGetAvailableSize
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapAlloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemset (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1df]"></a>SCH_Register</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sch_main.o(i.SCH_Register))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstScanInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInitiatorInit
</UL>

<P><STRONG><a name="[215]"></a>SCH_RemoveByEx</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sch_main.o(i.SCH_RemoveByEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SCH_RemoveByEx &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveItem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnReset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnCancel
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler
</UL>

<P><STRONG><a name="[26e]"></a>SCH_RemoveItem</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sch_main.o(i.SCH_RemoveItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCH_RemoveItem
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx
</UL>

<P><STRONG><a name="[241]"></a>SCH_Reset</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sch_main.o(i.SCH_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCH_Reset &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[474]"></a>SYS_delay_10nop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pan_sys.o(i.SYS_delay_10nop))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[443]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(i.SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[149]"></a>SetRandSeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, math.o(i.SetRandSeed))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_RandInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init
</UL>

<P><STRONG><a name="[152]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_panseries.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_RefClkSrcConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPeripheralFreq
</UL>

<P><STRONG><a name="[26f]"></a>SystemHwParamLoader</STRONG> (Thumb, 674 bytes, Stack size 24 bytes, system_panseries.o(i.SystemHwParamLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemHwParamLoader &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PW_ParamsSet
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetCalirationParams
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetFlashCapacity
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadInfoArea
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashUniqueId
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlashJedecId
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ParamsSet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, system_panseries.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; FMC_SetFlashMode
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIcache
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetFlashMode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Set3vSyncAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(.text)
</UL>
<P><STRONG><a name="[435]"></a>TGT_SendMultiData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart_at.o(i.TGT_SendMultiData))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_uart_read_write
</UL>

<P><STRONG><a name="[22]"></a>TRIM_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.TRIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TRIM_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>TRIM_SetCalCnt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pan_clktrim.o(i.TRIM_SetCalCnt))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Calibrate32kRC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clktrim_measure_32k_clk_start (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>TRIM_SetCalWaitCnt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pan_clktrim.o(i.TRIM_SetCalWaitCnt))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Calibrate32kRC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clktrim_measure_32k_clk_start (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>TRIM_SetErrRange</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pan_clktrim.o(i.TRIM_SetErrRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TRIM_SetErrRange &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Calibrate32kRC
</UL>

<P><STRONG><a name="[277]"></a>TrackPrint</STRONG> (Thumb, 64 bytes, Stack size 280 bytes, track.o(i.TrackPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TrackPrint &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_acl_ll_to_host_cbk
</UL>

<P><STRONG><a name="[46f]"></a>TrackRegisterPrint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, track.o(i.TrackRegisterPrint))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_misc_register_print
</UL>

<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_at.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART1_IRQHandler &rArr; UART_HandleProc &rArr; proj_uart_at_handle &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>UART_HandleProc</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, uart_at.o(i.UART_HandleProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UART_HandleProc &rArr; proj_uart_at_handle &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[27d]"></a>UART_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pan_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Init &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPeripheralFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_at_init
</UL>

<P><STRONG><a name="[17f]"></a>Uint64ToBstream</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, byte_stream.o(i.Uint64ToBstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uint64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendSlvFeatureReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendFeatReq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler
</UL>

<P><STRONG><a name="[15c]"></a>XYcZ_add</STRONG> (Thumb, 422 bytes, Stack size 160 bytes, ecc.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = XYcZ_add &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[27f]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f0]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_mac_addr_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mbuf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_conn_desc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_printf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_notify
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;central_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_scan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btshell_on_mtu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleph_gap_event
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_subscribe
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_read
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf_priv
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_print_value_sec
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_uart_read_write
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_entry
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleProc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bytes
</UL>

<P><STRONG><a name="[4f1]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4f2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[281]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f3]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[299]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_conn_desc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_str
</UL>

<P><STRONG><a name="[4f4]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4f5]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[282]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f6]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4f7]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4f8]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[6e]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_setup.o(i.main)
</UL>
<P><STRONG><a name="[283]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f9]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4fa]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4fb]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[278]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPrint
</UL>

<P><STRONG><a name="[12d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[43e]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ecc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_rtos_mutex_get
</UL>

<P><STRONG><a name="[3ba]"></a>__ARM_common_memclr1_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs_id.o(i.__ARM_common_memclr1_6))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_reset
</UL>

<P><STRONG><a name="[326]"></a>__ARM_common_memclr2_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gap.o(i.__ARM_common_memclr2_6))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
</UL>

<P><STRONG><a name="[150]"></a>__ARM_common_memcpy1_6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_setup.o(i.__ARM_common_memcpy1_6))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_mac_addr_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_enh_conn_complete
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_dir_adv_rpt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_complete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_data_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>

<P><STRONG><a name="[240]"></a>__ARM_common_memcpy1_8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_sm_alg.o(i.__ARM_common_memcpy1_8))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoveDeviceFromWhiteList
</UL>

<P><STRONG><a name="[32d]"></a>__ARM_common_memcpy4_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, segger_rtt.o(i.__ARM_common_memcpy4_7))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
</UL>

<P><STRONG><a name="[309]"></a>free</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_init
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[284]"></a>__malloc$realloc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __malloc$realloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[4fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[286]"></a>_copy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utils.o(i._copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[491]"></a>_double_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(i._double_byte))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[28c]"></a>_mtb_kvstore_crc16</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mtb_kvstore.o(i._mtb_kvstore_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mtb_kvstore_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_read_record
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_find_record_in_ram_table
</UL>

<P><STRONG><a name="[130]"></a>_rijndaelEncrypt</STRONG> (Thumb, 430 bytes, Stack size 96 bytes, aes_sw.o(i._rijndaelEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
</UL>

<P><STRONG><a name="[12f]"></a>_rijndaelSetKey</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes_sw.o(i._rijndaelSetKey))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
</UL>

<P><STRONG><a name="[296]"></a>_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utils.o(i._set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _set
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
</UL>

<P><STRONG><a name="[1e6]"></a>_swap</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, utils.o(i._swap))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqReplyHandler
</UL>

<P><STRONG><a name="[297]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_setup.o(i.abort))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_svc_disced
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_dsc_disced
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_chr_disced
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_sync
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
</UL>

<P><STRONG><a name="[298]"></a>addr_str</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, misc.o(i.addr_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = addr_str &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[3c]"></a>app_ble_thread_entry</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart_at.o(i.app_ble_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = app_ble_thread_entry &rArr; peri_notify &rArr; ble_gatts_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_notify
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;central_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_scan
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_at.o(i.app_ble_thread_init)
</UL>
<P><STRONG><a name="[2a7]"></a>app_ble_thread_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart_at.o(i.app_ble_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_ble_thread_init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[2aa]"></a>app_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, main.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = app_init &rArr; ble_store_config_init &rArr; host_kvstore_init &rArr; mtb_kvstore_init &rArr; _mtb_kvstore_garbage_collection &rArr; _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_mac_addr_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_at_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_svc_gap_device_name_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_thread_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_bd_address
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44d]"></a>app_init_early</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_setup.o(i.app_init_early))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>apply_z</STRONG> (Thumb, 112 bytes, Stack size 152 bytes, ecc.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = apply_z &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[134]"></a>assert_failed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, track.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstConnEvtHandler (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDisconnCmpl
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtxMem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerConfigEx
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendEvent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_AddMsgHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxCmdMem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InitRxAclMem
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_RandInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx (via Veneer)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingConnEvt (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SelectNextChanIndex
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckCmplPktNum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_BuildChanRemapTbl
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo (via Veneer)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetChanIndex (via Veneer)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerConfig
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_code
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustDataChannelIndexEx (via Veneer)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendQueueMsg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInitiatorInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LlInit
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Enquene
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Dequeue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitWhiteListMem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitScanMem
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart (via Veneer)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStop (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanEvtHandler (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler (via Veneer)
</UL>

<P><STRONG><a name="[54]"></a>ble_app_user_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs.o(i.ble_app_user_evt))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[2b5]"></a>ble_att_chan_mtu</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_att.o(i.ble_att_chan_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_att_chan_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_is_mtu_req_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[76]"></a>ble_att_clt_rx_error</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_att_clt.o(i.ble_att_clt_rx_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_att_clt_rx_error &rArr; ble_gattc_rx_err &rArr; ble_gattc_extract &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ble_att_clt_rx_exec_write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_exec_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_att_clt_rx_exec_write &rArr; ble_gattc_rx_exec_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ble_att_clt_rx_find_info</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, ble_att_clt.o(i.ble_att_clt_rx_find_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_att_clt_rx_find_info &rArr; ble_gattc_rx_find_info_idata &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ble_att_clt_rx_find_type_value</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_rx_find_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_att_clt_rx_find_type_value &rArr; ble_gattc_rx_find_type_value_complete &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ble_att_clt_rx_indicate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ble_att_clt_rx_indicate &rArr; ble_gatts_rx_indicate_rsp &rArr; ble_gatts_send_next_indicate &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ble_att_clt_rx_mtu</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_rx_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_att_clt_rx_mtu &rArr; ble_gattc_rx_mtu &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_peer_mtu
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ble_att_clt_rx_prep_write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ble_att_clt.o(i.ble_att_clt_rx_prep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_att_clt_rx_prep_write &rArr; ble_gattc_rx_prep_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ble_att_clt_rx_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_att_clt_rx_read &rArr; ble_gattc_rx_read_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ble_att_clt_rx_read_blob</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_read_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_att_clt_rx_read_blob &rArr; ble_gattc_rx_read_blob_rsp &rArr; ble_gattc_read_long_rx_read_rsp &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ble_att_clt_rx_read_group_type</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_att_clt.o(i.ble_att_clt_rx_read_group_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_att_clt_rx_read_group_type &rArr; ble_gattc_rx_read_group_type_complete &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ble_att_clt_rx_read_mult</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_read_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_att_clt_rx_read_mult &rArr; ble_gattc_rx_read_mult_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ble_att_clt_rx_read_type</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_att_clt.o(i.ble_att_clt_rx_read_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_att_clt_rx_read_type &rArr; ble_gattc_rx_read_type_complete &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ble_att_clt_rx_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_att_clt.o(i.ble_att_clt_rx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_att_clt_rx_write &rArr; ble_gattc_rx_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>ble_att_clt_tx_exec_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_att_clt.o(i.ble_att_clt_tx_exec_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_err
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_err
</UL>

<P><STRONG><a name="[2d4]"></a>ble_att_clt_tx_find_info</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_find_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
</UL>

<P><STRONG><a name="[2d5]"></a>ble_att_clt_tx_find_type_value</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ble_att_clt.o(i.ble_att_clt_tx_find_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
</UL>

<P><STRONG><a name="[2d6]"></a>ble_att_clt_tx_indicate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_indicate &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
</UL>

<P><STRONG><a name="[2d9]"></a>ble_att_clt_tx_mtu</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_mtu &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
</UL>

<P><STRONG><a name="[2da]"></a>ble_att_clt_tx_notify</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_notify &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
</UL>

<P><STRONG><a name="[2db]"></a>ble_att_clt_tx_prep_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_prep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
</UL>

<P><STRONG><a name="[2dd]"></a>ble_att_clt_tx_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_att_clt.o(i.ble_att_clt_tx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_att_clt_tx_read &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
</UL>

<P><STRONG><a name="[2de]"></a>ble_att_clt_tx_read_blob</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_read_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
</UL>

<P><STRONG><a name="[2df]"></a>ble_att_clt_tx_read_group_type</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_read_group_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
</UL>

<P><STRONG><a name="[2e1]"></a>ble_att_clt_tx_read_type</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_read_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_complete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_complete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
</UL>

<P><STRONG><a name="[2e2]"></a>ble_att_clt_tx_write_req</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_att_clt.o(i.ble_att_clt_tx_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_att_clt_tx_write_req &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
</UL>

<P><STRONG><a name="[2d2]"></a>ble_att_cmd_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_att_cmd.o(i.ble_att_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_att_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
</UL>

<P><STRONG><a name="[2e5]"></a>ble_att_cmd_prepare</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_att_cmd.o(i.ble_att_cmd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_att_cmd_prepare &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
</UL>

<P><STRONG><a name="[2c3]"></a>ble_att_conn_chan_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_att.o(i.ble_att_conn_chan_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_att_conn_chan_find &rArr; ble_hs_misc_conn_chan_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
</UL>

<P><STRONG><a name="[2e7]"></a>ble_att_create_chan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_att.o(i.ble_att_create_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_att_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[30b]"></a>ble_att_inc_tx_stat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_att.o(i.ble_att_inc_tx_stat))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>

<P><STRONG><a name="[3c0]"></a>ble_att_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_att.o(i.ble_att_init))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[2dc]"></a>ble_att_mtu</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_att.o(i.ble_att_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_att_mtu &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_is_mtu_req_sent
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
</UL>

<P><STRONG><a name="[2c6]"></a>ble_att_set_peer_mtu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_att.o(i.ble_att_set_peer_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[2ec]"></a>ble_att_set_preferred_mtu</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_att.o(i.ble_att_set_preferred_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_att_set_preferred_mtu &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_idx
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>

<P><STRONG><a name="[2f4]"></a>ble_att_svr_find_by_uuid</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_att_svr.o(i.ble_att_svr_find_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_att_svr_find_by_uuid &rArr; ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[2f6]"></a>ble_att_svr_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_att_svr.o(i.ble_att_svr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_att_svr_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[2f8]"></a>ble_att_svr_prep_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_att_svr.o(i.ble_att_svr_prep_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_att_svr_prep_clear &rArr; os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>

<P><STRONG><a name="[376]"></a>ble_att_svr_prev_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_att_svr.o(i.ble_att_svr_prev_handle))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svcs
</UL>

<P><STRONG><a name="[2fb]"></a>ble_att_svr_read_handle</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_read_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
</UL>

<P><STRONG><a name="[2fc]"></a>ble_att_svr_register</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_att_svr_register &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svcs
</UL>

<P><STRONG><a name="[8b]"></a>ble_att_svr_rx_exec_write</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, ble_att_svr.o(i.ble_att_svr_rx_exec_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ble_att_svr_rx_exec_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_concat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ble_att_svr_rx_find_info</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, ble_att_svr.o(i.ble_att_svr_rx_find_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_att_svr_rx_find_info &rArr; ble_att_svr_tx_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ble_att_svr_rx_find_type_value</STRONG> (Thumb, 770 bytes, Stack size 152 bytes, ble_att_svr.o(i.ble_att_svr_rx_find_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ble_att_svr_rx_find_type_value &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpf
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ble_att_svr_rx_indicate</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_att_svr_rx_indicate &rArr; ble_att_svr_tx_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ble_att_svr_rx_mtu</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, ble_att_svr.o(i.ble_att_svr_rx_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_att_svr_rx_mtu &rArr; ble_att_svr_tx_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_peer_mtu
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ble_att_svr_rx_notify</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_att_svr.o(i.ble_att_svr_rx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_att_svr_rx_notify &rArr; ble_gap_notify_rx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ble_att_svr_rx_prep_write</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, ble_att_svr.o(i.ble_att_svr_rx_prep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ble_att_svr_rx_prep_write &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ble_att_svr_rx_read</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_rx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_att_svr_rx_read &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ble_att_svr_rx_read_blob</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_rx_read_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_att_svr_rx_read_blob &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ble_att_svr_rx_read_group_type</STRONG> (Thumb, 696 bytes, Stack size 160 bytes, ble_att_svr.o(i.ble_att_svr_rx_read_group_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ble_att_svr_rx_read_group_type &rArr; ble_att_svr_read_flat &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ble_att_svr_rx_read_mult</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, ble_att_svr.o(i.ble_att_svr_rx_read_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ble_att_svr_rx_read_mult &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ble_att_svr_rx_read_type</STRONG> (Thumb, 634 bytes, Stack size 184 bytes, ble_att_svr.o(i.ble_att_svr_rx_read_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ble_att_svr_rx_read_type &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ble_att_svr_rx_write</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_rx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_att_svr_rx_write &rArr; ble_att_svr_write_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ble_att_svr_rx_write_no_rsp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_att_svr.o(i.ble_att_svr_rx_write_no_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_att_svr_rx_write_no_rsp &rArr; ble_att_svr_write_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>ble_att_svr_start</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_att_svr.o(i.ble_att_svr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_att_svr_start &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[388]"></a>ble_att_svr_ticks_until_tmo</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_att_svr.o(i.ble_att_svr_ticks_until_tmo))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
</UL>

<P><STRONG><a name="[2eb]"></a>ble_att_svr_tx_error_rsp</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_tx_error_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
</UL>

<P><STRONG><a name="[30c]"></a>ble_att_truncate_to_mtu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_att.o(i.ble_att_truncate_to_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_att_truncate_to_mtu &rArr; os_mbuf_adj &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_is_mtu_req_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>

<P><STRONG><a name="[2d3]"></a>ble_att_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_att_cmd.o(i.ble_att_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_inc_tx_stat
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
</UL>

<P><STRONG><a name="[362]"></a>ble_gap_adv_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap.o(i.ble_gap_adv_active))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[310]"></a>ble_gap_adv_set_fields</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, ble_gap.o(i.ble_gap_adv_set_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>

<P><STRONG><a name="[313]"></a>ble_gap_adv_start</STRONG> (Thumb, 490 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gap_adv_start &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>

<P><STRONG><a name="[364]"></a>ble_gap_conn_active</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_gap.o(i.ble_gap_conn_active))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[319]"></a>ble_gap_conn_broken</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, ble_gap.o(i.ble_gap_conn_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_connection_broken
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_conn_broken
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_connection_broken
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
</UL>

<P><STRONG><a name="[323]"></a>ble_gap_conn_find</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_conn_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_gap_conn_find &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[324]"></a>ble_gap_connect</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gap_connect &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[327]"></a>ble_gap_disc</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_disc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_gap_disc &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_enabled
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_scan
</UL>

<P><STRONG><a name="[363]"></a>ble_gap_disc_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap.o(i.ble_gap_disc_active))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[328]"></a>ble_gap_disc_cancel</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_gap.o(i.ble_gap_disc_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_disc_cancel &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[32a]"></a>ble_gap_enc_event</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, ble_gap.o(i.ble_gap_enc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[3d2]"></a>ble_gap_event_listener_unregister</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ble_gap.o(i.ble_gap_event_listener_unregister))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_timeout_cb
</UL>

<P><STRONG><a name="[32e]"></a>ble_gap_identity_event</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_identity_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gap_identity_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[32f]"></a>ble_gap_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_gap_init &rArr; npl_freertos_mutex_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[2c7]"></a>ble_gap_mtu_event</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_mtu_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_mtu_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[301]"></a>ble_gap_notify_rx_event</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_notify_rx_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_notify_rx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
</UL>

<P><STRONG><a name="[332]"></a>ble_gap_notify_tx_event</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_notify_tx_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_notify_tx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_tmo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_err
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
</UL>

<P><STRONG><a name="[333]"></a>ble_gap_passkey_event</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_passkey_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gap_passkey_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[334]"></a>ble_gap_repeat_pairing_event</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_repeat_pairing_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gap_repeat_pairing_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[335]"></a>ble_gap_reset_state</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ble_gap_reset_state &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[337]"></a>ble_gap_rx_adv_report</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_rx_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_gap_rx_adv_report &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_find_field
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_dir_adv_rpt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_adv_rpt
</UL>

<P><STRONG><a name="[339]"></a>ble_gap_rx_conn_complete</STRONG> (Thumb, 504 bytes, Stack size 136 bytes, ble_gap.o(i.ble_gap_rx_conn_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ble_gap_rx_conn_complete &rArr; ble_gap_master_failed &rArr; ble_gap_disc_complete &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_insert
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_enh_conn_complete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_complete
</UL>

<P><STRONG><a name="[33d]"></a>ble_gap_rx_disconn_complete</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_rx_disconn_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ble_gap_rx_disconn_complete &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
</UL>

<P><STRONG><a name="[33e]"></a>ble_gap_rx_l2cap_update_req</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, ble_gap.o(i.ble_gap_rx_l2cap_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gap_rx_l2cap_update_req &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[33f]"></a>ble_gap_rx_param_req</STRONG> (Thumb, 238 bytes, Stack size 112 bytes, ble_gap.o(i.ble_gap_rx_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ble_gap_rx_param_req &rArr; ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_parm_req
</UL>

<P><STRONG><a name="[340]"></a>ble_gap_rx_phy_update_complete</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_rx_phy_update_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_rx_phy_update_complete &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_phy_update_complete
</UL>

<P><STRONG><a name="[341]"></a>ble_gap_rx_rd_rem_sup_feat_complete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_rx_rd_rem_sup_feat_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_gap_rx_rd_rem_sup_feat_complete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_rd_rem_used_feat_complete
</UL>

<P><STRONG><a name="[343]"></a>ble_gap_rx_update_complete</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, ble_gap.o(i.ble_gap_rx_update_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ble_gap_rx_update_complete &rArr; ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_conn_upd_complete
</UL>

<P><STRONG><a name="[345]"></a>ble_gap_subscribe_event</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, ble_gap.o(i.ble_gap_subscribe_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
</UL>

<P><STRONG><a name="[346]"></a>ble_gap_terminate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_gap.o(i.ble_gap_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_gap_terminate &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
</UL>

<P><STRONG><a name="[347]"></a>ble_gap_timer</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, ble_gap.o(i.ble_gap_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ble_gap_timer &rArr; ble_gap_adv_finished &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[348]"></a>ble_gap_unpair</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ble_gap.o(i.ble_gap_unpair))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gap_unpair &rArr; ble_store_util_delete_peer &rArr; ble_store_delete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_remove_entry
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_except
</UL>

<P><STRONG><a name="[34b]"></a>ble_gap_unpair_oldest_except</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ble_gap.o(i.ble_gap_unpair_oldest_except))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ble_gap_unpair_oldest_except &rArr; ble_store_util_bonded_peers &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_status_rr
</UL>

<P><STRONG><a name="[34d]"></a>ble_gap_unpair_oldest_peer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_unpair_oldest_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_gap_unpair_oldest_peer &rArr; ble_store_util_bonded_peers &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_status_rr
</UL>

<P><STRONG><a name="[34e]"></a>ble_gap_update_params</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, ble_gap.o(i.ble_gap_update_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ble_gap_update_params &rArr; ble_l2cap_sig_update &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[320]"></a>ble_gattc_connection_broken</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_connection_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gattc_connection_broken &rArr; ble_gattc_extract &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[350]"></a>ble_gattc_disc_all_chrs</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_disc_all_chrs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_chrs
</UL>

<P><STRONG><a name="[354]"></a>ble_gattc_disc_all_dscs</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_disc_all_dscs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_dscs
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_chrs
</UL>

<P><STRONG><a name="[355]"></a>ble_gattc_disc_all_svcs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_all_svcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_gattc_disc_all_svcs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_all
</UL>

<P><STRONG><a name="[357]"></a>ble_gattc_exchange_mtu</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gattc.o(i.ble_gattc_exchange_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_gattc_exchange_mtu &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleph_gap_event
</UL>

<P><STRONG><a name="[359]"></a>ble_gattc_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[35a]"></a>ble_gattc_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_read &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
</UL>

<P><STRONG><a name="[2b8]"></a>ble_gattc_rx_err</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_gattc.o(i.ble_gattc_rx_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_gattc_rx_err &rArr; ble_gattc_extract &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_error
</UL>

<P><STRONG><a name="[2b9]"></a>ble_gattc_rx_exec_write_rsp</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_exec_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_exec_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_exec_write
</UL>

<P><STRONG><a name="[2be]"></a>ble_gattc_rx_find_info_complete</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_find_info_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_find_info_complete &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
</UL>

<P><STRONG><a name="[2bd]"></a>ble_gattc_rx_find_info_idata</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ble_gattc.o(i.ble_gattc_rx_find_info_idata))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_gattc_rx_find_info_idata &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
</UL>

<P><STRONG><a name="[2c0]"></a>ble_gattc_rx_find_type_value_complete</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ble_gattc.o(i.ble_gattc_rx_find_type_value_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gattc_rx_find_type_value_complete &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
</UL>

<P><STRONG><a name="[2bf]"></a>ble_gattc_rx_find_type_value_hinfo</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_find_type_value_hinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_find_type_value_hinfo &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
</UL>

<P><STRONG><a name="[2c5]"></a>ble_gattc_rx_mtu</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_mtu &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
</UL>

<P><STRONG><a name="[2c8]"></a>ble_gattc_rx_prep_write_rsp</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, ble_gattc.o(i.ble_gattc_rx_prep_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_gattc_rx_prep_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
</UL>

<P><STRONG><a name="[2ca]"></a>ble_gattc_rx_read_blob_rsp</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gattc.o(i.ble_gattc_rx_read_blob_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_gattc_rx_read_blob_rsp &rArr; ble_gattc_read_long_rx_read_rsp &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_blob
</UL>

<P><STRONG><a name="[2cb]"></a>ble_gattc_rx_read_group_type_adata</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_group_type_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_group_type_adata &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
</UL>

<P><STRONG><a name="[2cc]"></a>ble_gattc_rx_read_group_type_complete</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_group_type_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_group_type_complete &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
</UL>

<P><STRONG><a name="[2cd]"></a>ble_gattc_rx_read_mult_rsp</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_mult_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_mult_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_mult
</UL>

<P><STRONG><a name="[2c9]"></a>ble_gattc_rx_read_rsp</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read
</UL>

<P><STRONG><a name="[2ce]"></a>ble_gattc_rx_read_type_adata</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_type_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_type_adata &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
</UL>

<P><STRONG><a name="[2cf]"></a>ble_gattc_rx_read_type_complete</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_rx_read_type_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_rx_read_type_complete &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
</UL>

<P><STRONG><a name="[2d0]"></a>ble_gattc_rx_write_rsp</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_gattc.o(i.ble_gattc_rx_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_gattc_rx_write_rsp &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_write
</UL>

<P><STRONG><a name="[35d]"></a>ble_gattc_timer</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, ble_gattc.o(i.ble_gattc_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_gattc_timer &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[35e]"></a>ble_gattc_write_flat</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_gattc.o(i.ble_gattc_write_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_gattc_write_flat &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;central_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
</UL>

<P><STRONG><a name="[361]"></a>ble_gatts_add_svcs</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_add_svcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_gatts_add_svcs &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
</UL>

<P><STRONG><a name="[32c]"></a>ble_gatts_bonding_established</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ble_gatts.o(i.ble_gatts_bonding_established))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_gatts_bonding_established &rArr; ble_store_write_cccd &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
</UL>

<P><STRONG><a name="[32b]"></a>ble_gatts_bonding_restored</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, ble_gatts.o(i.ble_gatts_bonding_restored))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
</UL>

<P><STRONG><a name="[4b]"></a>ble_gatts_clt_cfg_access</STRONG> (Thumb, 342 bytes, Stack size 120 bytes, ble_gatts.o(i.ble_gatts_clt_cfg_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ble_gatts_clt_cfg_access &rArr; ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_cccd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[385]"></a>ble_gatts_conn_can_alloc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_gatts.o(i.ble_gatts_conn_can_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_can_alloc
</UL>

<P><STRONG><a name="[36f]"></a>ble_gatts_conn_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_conn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_conn_init &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[31f]"></a>ble_gatts_connection_broken</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ble_gatts.o(i.ble_gatts_connection_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gatts_connection_broken &rArr; ble_gap_subscribe_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[444]"></a>ble_gatts_count_cfg</STRONG> (Thumb, 304 bytes, Stack size 28 bytes, ble_gatts.o(i.ble_gatts_count_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_gatts_count_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_init
</UL>

<P><STRONG><a name="[36b]"></a>ble_gatts_indicate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gatts_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
</UL>

<P><STRONG><a name="[371]"></a>ble_gatts_indicate_custom</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gatts_indicate_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate
</UL>

<P><STRONG><a name="[370]"></a>ble_gatts_indicate_fail_notconn</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gatts_indicate_fail_notconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gatts_indicate_fail_notconn &rArr; ble_gattc_extract &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
</UL>

<P><STRONG><a name="[3c1]"></a>ble_gatts_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gatts.o(i.ble_gatts_init))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[36a]"></a>ble_gatts_notify</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gatts_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_gatts_notify &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
</UL>

<P><STRONG><a name="[374]"></a>ble_gatts_notify_custom</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gatts_notify_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_gatts_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_notify
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
</UL>

<P><STRONG><a name="[375]"></a>ble_gatts_register_svcs</STRONG> (Thumb, 1046 bytes, Stack size 216 bytes, ble_gatts.o(i.ble_gatts_register_svcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gatts_register_svcs &rArr; ble_att_svr_register &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prev_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>

<P><STRONG><a name="[372]"></a>ble_gatts_rx_indicate_ack</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ble_gatts.o(i.ble_gatts_rx_indicate_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_gatts_rx_indicate_ack &rArr; ble_store_write_cccd &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_err
</UL>

<P><STRONG><a name="[2c1]"></a>ble_gatts_rx_indicate_rsp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gatts_rx_indicate_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ble_gatts_rx_indicate_rsp &rArr; ble_gatts_send_next_indicate &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_indicate
</UL>

<P><STRONG><a name="[373]"></a>ble_gatts_send_next_indicate</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_send_next_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ble_gatts_send_next_indicate &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_err
</UL>

<P><STRONG><a name="[377]"></a>ble_gatts_start</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, ble_gatts.o(i.ble_gatts_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gatts_start &rArr; ble_gatts_register_svcs &rArr; ble_att_svr_register &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_uuid
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_active
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_active
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_active
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_register_svcs
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>

<P><STRONG><a name="[378]"></a>ble_gatts_tx_notifications</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ble_gatts.o(i.ble_gatts_tx_notifications))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ble_gatts_tx_notifications &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_idx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_tx_notify
</UL>

<P><STRONG><a name="[6c]"></a>ble_hci_acl_ll_to_host_cbk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nimble_glue_spark.o(i.ble_hci_acl_ll_to_host_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_hci_acl_ll_to_host_cbk &rArr; TrackPrint &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_acl_impl
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_acl_from_ll
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(i.ll_init)
</UL>
<P><STRONG><a name="[6d]"></a>ble_hci_evt_ll_to_host_cbk</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nimble_glue_spark.o(i.ble_hci_evt_ll_to_host_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_hci_evt_ll_to_host_cbk &rArr; ble_transport_to_hs_evt_impl &rArr; ble_hs_hci_rx_evt &rArr; ble_hs_enqueue_hci_event &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_evt_impl
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_evt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(i.ll_init)
</UL>
<P><STRONG><a name="[338]"></a>ble_hs_adv_find_field</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ble_hs_adv.o(i.ble_hs_adv_find_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hs_adv_find_field
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
</UL>

<P><STRONG><a name="[37d]"></a>ble_hs_adv_parse_fields</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, ble_hs_adv.o(i.ble_hs_adv_parse_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_hs_adv_parse_fields &rArr; ble_uuid_init_from_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[311]"></a>ble_hs_adv_set_fields</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ble_hs_adv.o(i.ble_hs_adv_set_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
</UL>

<P><STRONG><a name="[322]"></a>ble_hs_atomic_conn_delete</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_hs_atomic.o(i.ble_hs_atomic_conn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_atomic_conn_delete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_remove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[33a]"></a>ble_hs_atomic_conn_flags</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_atomic.o(i.ble_hs_atomic_conn_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_hs_atomic_conn_flags &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[336]"></a>ble_hs_atomic_first_conn_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_hs_atomic.o(i.ble_hs_atomic_first_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_atomic_first_conn_handle &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
</UL>

<P><STRONG><a name="[2f2]"></a>ble_hs_conn_addrs</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ble_hs_conn.o(i.ble_hs_conn_addrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_own_addr_type_to_id
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_fill_conn_desc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[33b]"></a>ble_hs_conn_alloc</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, ble_hs_conn.o(i.ble_hs_conn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hs_conn_alloc &rArr; ble_att_svr_prep_clear &rArr; os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_create_chan
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_create_chan
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_create_chan
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[314]"></a>ble_hs_conn_can_alloc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_hs_conn.o(i.ble_hs_conn_can_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_conn_can_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_can_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[2ee]"></a>ble_hs_conn_chan_find_by_scid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_chan_find_by_scid))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[418]"></a>ble_hs_conn_exists</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_exists))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[2f1]"></a>ble_hs_conn_find</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_find))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>

<P><STRONG><a name="[2f0]"></a>ble_hs_conn_find_assert</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_find_assert))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[325]"></a>ble_hs_conn_find_by_addr</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, ble_hs_conn.o(i.ble_hs_conn_find_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_hs_conn_find_by_addr &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_own_addr_type_to_id
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
</UL>

<P><STRONG><a name="[2ed]"></a>ble_hs_conn_find_by_idx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_find_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
</UL>

<P><STRONG><a name="[365]"></a>ble_hs_conn_first</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_first))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[37f]"></a>ble_hs_conn_free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ble_hs_conn.o(i.ble_hs_conn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_conn_free &rArr; ble_att_svr_prep_clear &rArr; os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
</UL>

<P><STRONG><a name="[386]"></a>ble_hs_conn_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_hs_conn.o(i.ble_hs_conn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_conn_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[33c]"></a>ble_hs_conn_insert</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_hs_conn.o(i.ble_hs_conn_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_conn_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>

<P><STRONG><a name="[37e]"></a>ble_hs_conn_remove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_hs_conn.o(i.ble_hs_conn_remove))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
</UL>

<P><STRONG><a name="[387]"></a>ble_hs_conn_timer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_hs_conn.o(i.ble_hs_conn_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_hs_conn_timer &rArr; ble_gap_terminate &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_ticks_until_tmo
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[389]"></a>ble_hs_enqueue_hci_event</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_enqueue_hci_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_enqueue_hci_event &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>

<P><STRONG><a name="[321]"></a>ble_hs_flow_connection_broken</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_flow.o(i.ble_hs_flow_connection_broken))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[3d0]"></a>ble_hs_flow_startup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_flow.o(i.ble_hs_flow_startup))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[42d]"></a>ble_hs_flow_track_data_mbuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_flow.o(i.ble_hs_flow_track_data_mbuf))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_acl_impl
</UL>

<P><STRONG><a name="[394]"></a>ble_hs_hci_acl_tx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_hs_hci.o(i.ble_hs_hci_acl_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
</UL>

<P><STRONG><a name="[395]"></a>ble_hs_hci_acl_tx_now</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, ble_hs_hci.o(i.ble_hs_hci_acl_tx_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_handle_pb_bc_join
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_tx_data
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
</UL>

<P><STRONG><a name="[39a]"></a>ble_hs_hci_add_avail_pkts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_hs_hci.o(i.ble_hs_hci_add_avail_pkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_hs_hci_add_avail_pkts &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
</UL>

<P><STRONG><a name="[39c]"></a>ble_hs_hci_cmd_send_buf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_hs_hci_cmd.o(i.ble_hs_hci_cmd_send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_hs_hci_cmd_send_buf &rArr; ble_transport_to_ll_cmd_impl &rArr; pan_ble_hci_cmd_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_cmd_impl
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_cmd
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_parent_task
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[312]"></a>ble_hs_hci_cmd_tx</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ble_hs_hci.o(i.ble_hs_hci_cmd_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_adv_tx_pwr
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_start_exec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_restore_exec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_start_exec
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_restore_exec
</UL>

<P><STRONG><a name="[391]"></a>ble_hs_hci_evt_acl_process</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_acl_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_hs_hci_evt_acl_process &rArr; ble_l2cap_rx &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_data
</UL>

<P><STRONG><a name="[392]"></a>ble_hs_hci_evt_process</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_hs_hci_evt_process &rArr; ble_transport_free &rArr; os_memblock_from &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_hci_ev
</UL>

<P><STRONG><a name="[3cd]"></a>ble_hs_hci_get_hci_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(i.ble_hs_hci_get_hci_version))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[3ae]"></a>ble_hs_hci_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_hci.o(i.ble_hs_hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_hci_init &rArr; npl_freertos_mutex_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[3b1]"></a>ble_hs_hci_rx_evt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ble_hs_hci.o(i.ble_hs_hci_rx_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_hs_hci_rx_evt &rArr; ble_hs_enqueue_hci_event &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_evt_impl
</UL>

<P><STRONG><a name="[3ce]"></a>ble_hs_hci_set_buf_sz</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_hs_hci.o(i.ble_hs_hci_set_buf_sz))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[3cc]"></a>ble_hs_hci_set_hci_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(i.ble_hs_hci_set_hci_version))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[3cf]"></a>ble_hs_hci_set_le_supported_feat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hs_hci.o(i.ble_hs_hci_set_le_supported_feat))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[3a3]"></a>ble_hs_hci_util_data_hdr_strip</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_hs_hci_util.o(i.ble_hs_hci_util_data_hdr_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_hs_hci_util_data_hdr_strip &rArr; os_mbuf_copydata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[397]"></a>ble_hs_hci_util_handle_pb_bc_join</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_hs_hci_util.o(i.ble_hs_hci_util_handle_pb_bc_join))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[3b4]"></a>ble_hs_hci_util_rand</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_hs_hci_util.o(i.ble_hs_hci_util_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_gen_rnd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_rand
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_pair_rand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[2a1]"></a>ble_hs_hci_util_read_adv_tx_pwr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_hs_hci_util.o(i.ble_hs_hci_util_read_adv_tx_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[3b5]"></a>ble_hs_hci_util_set_random_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_hs_hci_util.o(i.ble_hs_hci_util_set_random_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_hs_hci_util_set_random_addr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
</UL>

<P><STRONG><a name="[3aa]"></a>ble_hs_hw_error</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_hw_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_hw_error &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_hw_error
</UL>

<P><STRONG><a name="[381]"></a>ble_hs_id_addr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_hs_id.o(i.ble_hs_id_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
</UL>

<P><STRONG><a name="[3b7]"></a>ble_hs_id_copy_addr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_hs_id.o(i.ble_hs_id_copy_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_hs_id_copy_addr &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_util_ensure_addr
</UL>

<P><STRONG><a name="[3b8]"></a>ble_hs_id_gen_rnd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_hs_id.o(i.ble_hs_id_gen_rnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_hs_id_gen_rnd &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_util_ensure_addr
</UL>

<P><STRONG><a name="[3b9]"></a>ble_hs_id_infer_auto</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ble_hs_id.o(i.ble_hs_id_infer_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_hs_id_infer_auto &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_own_addr_type_to_id
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_scan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[38d]"></a>ble_hs_id_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs_id.o(i.ble_hs_id_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_id_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_6
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[3bb]"></a>ble_hs_id_set_pub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_hs_id.o(i.ble_hs_id_set_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_id_set_pub &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[3bc]"></a>ble_hs_id_set_rnd</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, ble_hs_id.o(i.ble_hs_id_set_rnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_hs_id_set_rnd &rArr; ble_hs_hci_util_set_random_addr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_set_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_util_ensure_addr
</UL>

<P><STRONG><a name="[317]"></a>ble_hs_id_use_addr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_hs_id.o(i.ble_hs_id_use_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_hs_id_use_addr &rArr; ble_hs_id_addr_type_usable &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_ensure_started
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[3be]"></a>ble_hs_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ble_hs.o(i.ble_hs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_hs_init &rArr; ble_gap_init &rArr; npl_freertos_mutex_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_hs_init
</UL>

<P><STRONG><a name="[316]"></a>ble_hs_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs.o(i.ble_hs_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[39d]"></a>ble_hs_is_parent_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_is_parent_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_is_parent_task
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
</UL>

<P><STRONG><a name="[2c2]"></a>ble_hs_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_hs_lock &rArr; npl_freertos_mutex_pend &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_cccd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_timeout_cb
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_our_sec
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_our_sec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx_reject
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>

<P><STRONG><a name="[3eb]"></a>ble_hs_log_flat_buf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_log.o(i.ble_hs_log_flat_buf))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_read
</UL>

<P><STRONG><a name="[3c6]"></a>ble_hs_log_flat_buf_priv</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_store_config.o(i.ble_hs_log_flat_buf_priv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[398]"></a>ble_hs_log_mbuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_hs_log.o(i.ble_hs_log_mbuf))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[3ad]"></a>ble_hs_mbuf_acl_pkt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_hs_mbuf.o(i.ble_hs_mbuf_acl_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_mbuf_acl_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_frag_alloc
</UL>

<P><STRONG><a name="[35f]"></a>ble_hs_mbuf_att_pkt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_hs_mbuf.o(i.ble_hs_mbuf_att_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_mbuf_att_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
</UL>

<P><STRONG><a name="[35b]"></a>ble_hs_mbuf_from_flat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_hs_mbuf.o(i.ble_hs_mbuf_from_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_hs_mbuf_from_flat &rArr; os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_notify
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
</UL>

<P><STRONG><a name="[2e3]"></a>ble_hs_mbuf_l2cap_pkt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_hs_mbuf.o(i.ble_hs_mbuf_l2cap_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_hs_mbuf_l2cap_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>

<P><STRONG><a name="[2b7]"></a>ble_hs_mbuf_pullup_base</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_hs_mbuf.o(i.ble_hs_mbuf_pullup_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_error
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fail_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[2e6]"></a>ble_hs_misc_conn_chan_find</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_hs_misc.o(i.ble_hs_misc_conn_chan_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_misc_conn_chan_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
</UL>

<P><STRONG><a name="[30e]"></a>ble_hs_misc_conn_chan_find_reqd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_hs_misc.o(i.ble_hs_misc_conn_chan_find_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hs_misc_conn_chan_find_reqd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
</UL>

<P><STRONG><a name="[380]"></a>ble_hs_misc_own_addr_type_to_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_hs_misc.o(i.ble_hs_misc_own_addr_type_to_id))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_by_addr
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_addr_type_usable
</UL>

<P><STRONG><a name="[367]"></a>ble_hs_misc_peer_addr_type_to_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_hs_misc.o(i.ble_hs_misc_peer_addr_type_to_id))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_replace_mac
</UL>

<P><STRONG><a name="[390]"></a>ble_hs_misc_restore_irks</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs_misc.o(i.ble_hs_misc_restore_irks))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_hs_misc_restore_irks &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[3ca]"></a>ble_hs_pvcy_add_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_pvcy.o(i.ble_hs_pvcy_add_entry))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_one_irk
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
</UL>

<P><STRONG><a name="[3bd]"></a>ble_hs_pvcy_ensure_started</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_pvcy.o(i.ble_hs_pvcy_ensure_started))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>

<P><STRONG><a name="[410]"></a>ble_hs_pvcy_our_irk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_hs_pvcy.o(i.ble_hs_pvcy_our_irk))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[349]"></a>ble_hs_pvcy_remove_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_pvcy.o(i.ble_hs_pvcy_remove_entry))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
</UL>

<P><STRONG><a name="[3cb]"></a>ble_hs_pvcy_set_our_irk</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_hs_pvcy.o(i.ble_hs_pvcy_set_our_irk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_hs_pvcy_set_our_irk &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
</UL>

<P><STRONG><a name="[39b]"></a>ble_hs_sched_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_sched_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
</UL>

<P><STRONG><a name="[393]"></a>ble_hs_start</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_hs.o(i.ble_hs_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ble_hs_start &rArr; ble_hs_misc_restore_irks &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage2
</UL>

<P><STRONG><a name="[38e]"></a>ble_hs_startup_go</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, ble_hs_startup.o(i.ble_hs_startup_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_hs_startup_go &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_le_supported_feat
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_hci_version
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_set_buf_sz
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_get_hci_version
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_startup
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_set_our_irk
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[3c2]"></a>ble_hs_stop_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_stop.o(i.ble_hs_stop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_hs_stop_init &rArr; npl_freertos_callout_init &rArr; xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[69]"></a>ble_hs_thread_entry</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.ble_hs_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_hs_thread_entry &rArr; nimble_port_run &rArr; npl_freertos_eventq_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(i.hs_thread_init)
</UL>
<P><STRONG><a name="[304]"></a>ble_hs_timer_resched</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_timer_resched))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[399]"></a>ble_hs_tx_data</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hs_tx_data &rArr; ble_transport_to_ll_acl_impl &rArr; pan_ble_hci_acl_nimble_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_acl_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[2c4]"></a>ble_hs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_mtu
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_finished
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_mtu
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_extract
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_first_conn_handle
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_cccd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_cccd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete_cccd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_timeout_cb
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_pub
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_our_sec
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_our_sec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx_reject
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>

<P><STRONG><a name="[3da]"></a>ble_hs_util_ensure_addr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, addr.o(i.ble_hs_util_ensure_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_hs_util_ensure_addr &rArr; ble_hs_id_gen_rnd &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_set_rnd
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_gen_rnd
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_copy_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_sync
</UL>

<P><STRONG><a name="[3a7]"></a>ble_hs_wakeup_tx</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ble_hs.o(i.ble_hs_wakeup_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_wakeup_tx &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_first
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_disconn_complete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_num_completed_pkts
</UL>

<P><STRONG><a name="[2e8]"></a>ble_l2cap_chan_alloc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_l2cap.o(i.ble_l2cap_chan_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_l2cap_chan_alloc &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_create_chan
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_create_chan
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_create_chan
</UL>

<P><STRONG><a name="[384]"></a>ble_l2cap_chan_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_l2cap.o(i.ble_l2cap_chan_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_chan_free &rArr; os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
</UL>

<P><STRONG><a name="[2e9]"></a>ble_l2cap_get_conn_handle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_l2cap.o(i.ble_l2cap_get_conn_handle))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
</UL>

<P><STRONG><a name="[3bf]"></a>ble_l2cap_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_l2cap.o(i.ble_l2cap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_init &rArr; ble_sm_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[2b6]"></a>ble_l2cap_is_mtu_req_sent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_l2cap.o(i.ble_l2cap_is_mtu_req_sent))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
</UL>

<P><STRONG><a name="[3a6]"></a>ble_l2cap_remove_rx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_l2cap.o(i.ble_l2cap_remove_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_l2cap_remove_rx &rArr; os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[3a4]"></a>ble_l2cap_rx</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, ble_l2cap.o(i.ble_l2cap_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_l2cap_rx &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_chan_find_by_scid
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_chan_mtu
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pack_chains
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[3de]"></a>ble_l2cap_sig_cmd_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_l2cap_sig_cmd.o(i.ble_l2cap_sig_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_l2cap_sig_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[31d]"></a>ble_l2cap_sig_conn_broken</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_conn_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_sig_conn_broken &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[382]"></a>ble_l2cap_sig_create_chan</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_create_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_sig_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[3e0]"></a>ble_l2cap_sig_hdr_parse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_l2cap_sig_cmd.o(i.ble_l2cap_sig_hdr_parse))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[3db]"></a>ble_l2cap_sig_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_l2cap_sig_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
</UL>

<P><STRONG><a name="[3a5]"></a>ble_l2cap_sig_reject_invalid_cid_tx</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, ble_l2cap_sig_cmd.o(i.ble_l2cap_sig_reject_invalid_cid_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_l2cap_sig_reject_invalid_cid_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>

<P><STRONG><a name="[3df]"></a>ble_l2cap_sig_reject_tx</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ble_l2cap_sig_cmd.o(i.ble_l2cap_sig_reject_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_l2cap_sig_reject_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[3d4]"></a>ble_l2cap_sig_timer</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_l2cap_sig_timer &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[3e1]"></a>ble_l2cap_sig_tx</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ble_l2cap_sig_cmd.o(i.ble_l2cap_sig_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_l2cap_sig_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_req_rx
</UL>

<P><STRONG><a name="[344]"></a>ble_l2cap_sig_update</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_l2cap_sig_update &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
</UL>

<P><STRONG><a name="[30d]"></a>ble_l2cap_tx</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ble_l2cap.o(i.ble_l2cap_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
</UL>

<P><STRONG><a name="[465]"></a>ble_misc_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_setup.o(i.ble_misc_init))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
</UL>

<P><STRONG><a name="[38c]"></a>ble_mqueue_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_hs_mqueue.o(i.ble_mqueue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_mqueue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[3c3]"></a>ble_mqueue_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_hs_mqueue.o(i.ble_mqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[3e5]"></a>ble_mqueue_put</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_hs_mqueue.o(i.ble_mqueue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_mqueue_put &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_acl_impl
</UL>

<P><STRONG><a name="[3ea]"></a>ble_sm_alg_c1</STRONG> (Thumb, 326 bytes, Stack size 264 bytes, ble_sm_alg.o(i.ble_sm_alg_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ble_sm_alg_c1 &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>

<P><STRONG><a name="[3f0]"></a>ble_sm_alg_ecc_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_sm_alg.o(i.ble_sm_alg_ecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sm_alg_ecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_init
</UL>

<P><STRONG><a name="[3f2]"></a>ble_sm_alg_f4</STRONG> (Thumb, 114 bytes, Stack size 128 bytes, ble_sm_alg.o(i.ble_sm_alg_f4))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ble_sm_alg_f4 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_oob_confirm
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
</UL>

<P><STRONG><a name="[3f3]"></a>ble_sm_alg_f5</STRONG> (Thumb, 218 bytes, Stack size 144 bytes, ble_sm_alg.o(i.ble_sm_alg_f5))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ble_sm_alg_f5 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
</UL>

<P><STRONG><a name="[3f4]"></a>ble_sm_alg_f6</STRONG> (Thumb, 234 bytes, Stack size 128 bytes, ble_sm_alg.o(i.ble_sm_alg_f6))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ble_sm_alg_f6 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
</UL>

<P><STRONG><a name="[3f5]"></a>ble_sm_alg_g2</STRONG> (Thumb, 132 bytes, Stack size 136 bytes, ble_sm_alg.o(i.ble_sm_alg_g2))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ble_sm_alg_g2 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be32
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
</UL>

<P><STRONG><a name="[3f7]"></a>ble_sm_alg_gen_dhkey</STRONG> (Thumb, 90 bytes, Stack size 144 bytes, ble_sm_alg.o(i.ble_sm_alg_gen_dhkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
</UL>

<P><STRONG><a name="[3fa]"></a>ble_sm_alg_gen_key_pair</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, ble_sm_alg.o(i.ble_sm_alg_gen_key_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
</UL>

<P><STRONG><a name="[3fc]"></a>ble_sm_alg_s1</STRONG> (Thumb, 128 bytes, Stack size 232 bytes, ble_sm_alg.o(i.ble_sm_alg_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_sm_alg_s1 &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
</UL>

<P><STRONG><a name="[3fd]"></a>ble_sm_cmd_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_sm_cmd.o(i.ble_sm_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_sm_cmd_get &rArr; ble_hs_mbuf_l2cap_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_exec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[31e]"></a>ble_sm_connection_broken</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ble_sm.o(i.ble_sm_connection_broken))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[383]"></a>ble_sm_create_chan</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_create_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_sm_create_chan &rArr; ble_l2cap_chan_alloc &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
</UL>

<P><STRONG><a name="[3a9]"></a>ble_sm_enc_change_rx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_enc_change_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ble_sm_enc_change_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_encrypt_change
</UL>

<P><STRONG><a name="[407]"></a>ble_sm_enc_initiate</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, ble_sm.o(i.ble_sm_enc_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ble_sm_enc_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
</UL>

<P><STRONG><a name="[3a8]"></a>ble_sm_enc_key_refresh_rx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_enc_key_refresh_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ble_sm_enc_key_refresh_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_enc_key_refresh
</UL>

<P><STRONG><a name="[409]"></a>ble_sm_gen_pair_rand</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_gen_pair_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_sm_gen_pair_rand &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
</UL>

<P><STRONG><a name="[40a]"></a>ble_sm_ia_ra</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ble_sm.o(i.ble_sm_ia_ra))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_sm_ia_ra &rArr; ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>

<P><STRONG><a name="[3dc]"></a>ble_sm_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sm_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
</UL>

<P><STRONG><a name="[40c]"></a>ble_sm_inject_io</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, ble_sm.o(i.ble_sm_inject_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ble_sm_inject_io &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_oob_data_check
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_oob_confirm
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleph_gap_event
</UL>

<P><STRONG><a name="[41e]"></a>ble_sm_ioact_state</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_sm.o(i.ble_sm_ioact_state))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
</UL>

<P><STRONG><a name="[3fe]"></a>ble_sm_lgcy_confirm_exec</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, ble_sm_lgcy.o(i.ble_sm_lgcy_confirm_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_sm_lgcy_confirm_exec &rArr; ble_sm_alg_c1 &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_exec
</UL>

<P><STRONG><a name="[402]"></a>ble_sm_lgcy_io_action</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, ble_sm_lgcy.o(i.ble_sm_lgcy_io_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_sm_lgcy_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[412]"></a>ble_sm_lgcy_random_exec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_sm_lgcy.o(i.ble_sm_lgcy_random_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_sm_lgcy_random_exec &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_exec
</UL>

<P><STRONG><a name="[413]"></a>ble_sm_lgcy_random_rx</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, ble_sm_lgcy.o(i.ble_sm_lgcy_random_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ble_sm_lgcy_random_rx &rArr; ble_sm_alg_c1 &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
</UL>

<P><STRONG><a name="[3ab]"></a>ble_sm_ltk_req_rx</STRONG> (Thumb, 364 bytes, Stack size 200 bytes, ble_sm.o(i.ble_sm_ltk_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ble_sm_ltk_req_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_our_sec
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_le_lt_key_req
</UL>

<P><STRONG><a name="[411]"></a>ble_sm_our_pair_rand</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_sm.o(i.ble_sm_our_pair_rand))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>

<P><STRONG><a name="[417]"></a>ble_sm_pair_initiate</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ble_sm.o(i.ble_sm_pair_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ble_sm_pair_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
</UL>

<P><STRONG><a name="[414]"></a>ble_sm_peer_pair_rand</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_sm.o(i.ble_sm_peer_pair_rand))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
</UL>

<P><STRONG><a name="[403]"></a>ble_sm_proc_can_advance</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_sm.o(i.ble_sm_proc_can_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_sm_proc_can_advance &rArr; ble_sm_lgcy_io_action
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[400]"></a>ble_sm_proc_find</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_sm.o(i.ble_sm_proc_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_sm_proc_find
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[404]"></a>ble_sm_process_result</STRONG> (Thumb, 534 bytes, Stack size 136 bytes, ble_sm.o(i.ble_sm_process_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_exists
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_peer_sec
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_write_our_sec
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate_replace_cccd
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_fill_store_value
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_connection_broken
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_event_rx
</UL>

<P><STRONG><a name="[3ff]"></a>ble_sm_sc_confirm_exec</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ble_sm_sc.o(i.ble_sm_sc_confirm_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ble_sm_sc_confirm_exec &rArr; ble_sm_alg_f4 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_exec
</UL>

<P><STRONG><a name="[fa]"></a>ble_sm_sc_dhkey_check_exec</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, ble_sm_sc.o(i.ble_sm_sc_dhkey_check_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ble_sm_sc_dhkey_check_exec &rArr; ble_sm_alg_f6 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ble_sm_sc_dhkey_check_rx</STRONG> (Thumb, 372 bytes, Stack size 128 bytes, ble_sm_sc.o(i.ble_sm_sc_dhkey_check_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ble_sm_sc_dhkey_check_rx &rArr; ble_sm_alg_f6 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[40b]"></a>ble_sm_sc_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_sm_sc.o(i.ble_sm_sc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_sm_sc_init &rArr; ble_sm_alg_ecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_init
</UL>

<P><STRONG><a name="[401]"></a>ble_sm_sc_io_action</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ble_sm_sc.o(i.ble_sm_sc_io_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sm_sc_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_rx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_rx
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_confirm_rx
</UL>

<P><STRONG><a name="[40e]"></a>ble_sm_sc_oob_confirm</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, ble_sm_sc.o(i.ble_sm_sc_oob_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ble_sm_sc_oob_confirm &rArr; ble_sm_alg_f4 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
</UL>

<P><STRONG><a name="[40d]"></a>ble_sm_sc_oob_data_check</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ble_sm_sc.o(i.ble_sm_sc_oob_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_sm_sc_oob_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
</UL>

<P><STRONG><a name="[f9]"></a>ble_sm_sc_public_key_exec</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ble_sm_sc.o(i.ble_sm_sc_public_key_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ble_sm_sc_public_key_exec &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ble_sm_sc_public_key_rx</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ble_sm_sc.o(i.ble_sm_sc_public_key_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = ble_sm_sc_public_key_rx &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[41c]"></a>ble_sm_sc_random_exec</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ble_sm_sc.o(i.ble_sm_sc_random_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ble_sm_sc_random_exec &rArr; ble_sm_alg_g2 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_pair_rand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_exec
</UL>

<P><STRONG><a name="[41d]"></a>ble_sm_sc_random_rx</STRONG> (Thumb, 448 bytes, Stack size 104 bytes, ble_sm_sc.o(i.ble_sm_sc_random_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ble_sm_sc_random_rx &rArr; ble_sm_alg_f5 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_peer_pair_rand
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_our_pair_rand
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ioact_state
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ia_ra
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_gen_pair_rand
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_random_rx
</UL>

<P><STRONG><a name="[3d5]"></a>ble_sm_timer</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ble_sm_timer &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
</UL>

<P><STRONG><a name="[40f]"></a>ble_sm_tx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_sm_cmd.o(i.ble_sm_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_conn_chan_find_reqd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_public_key_exec
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_exec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
</UL>

<P><STRONG><a name="[5e]"></a>ble_store_config_delete</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ble_store_config.o(i.ble_store_config_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_store_config_delete &rArr; ble_store_config_find_sec &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_sec
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_cccd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_config.o(i.ble_store_config_init)
</UL>
<P><STRONG><a name="[2b3]"></a>ble_store_config_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_store_config.o(i.ble_store_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ble_store_config_init &rArr; host_kvstore_init &rArr; mtb_kvstore_init &rArr; _mtb_kvstore_garbage_collection &rArr; _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_kvstore_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[5c]"></a>ble_store_config_read</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ble_store_config.o(i.ble_store_config_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_store_config_read &rArr; ble_store_config_find_sec &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_flat_buf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_sec
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_cccd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_config.o(i.ble_store_config_init)
</UL>
<P><STRONG><a name="[5d]"></a>ble_store_config_write</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, ble_store_config.o(i.ble_store_config_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_store_config_write &rArr; ble_store_config_print_value_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_cccd
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_key_from_value_sec
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_print_value_sec
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_sec
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_find_cccd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_iter_replace_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_config.o(i.ble_store_config_init)
</UL>
<P><STRONG><a name="[425]"></a>ble_store_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_store_delete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_all
</UL>

<P><STRONG><a name="[36e]"></a>ble_store_delete_cccd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_delete_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_store_delete_cccd &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
</UL>

<P><STRONG><a name="[3c9]"></a>ble_store_iterate</STRONG> (Thumb, 166 bytes, Stack size 168 bytes, ble_store.o(i.ble_store_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_bonded_peers
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate_replace_cccd
</UL>

<P><STRONG><a name="[419]"></a>ble_store_iterate_replace_cccd</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, ble_store_config.o(i.ble_store_iterate_replace_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ble_store_iterate_replace_cccd &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_all
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[36d]"></a>ble_store_key_from_value_cccd</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_key_from_value_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_store_key_from_value_cccd &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
</UL>

<P><STRONG><a name="[424]"></a>ble_store_key_from_value_sec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_key_from_value_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_store_key_from_value_sec &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
</UL>

<P><STRONG><a name="[369]"></a>ble_store_read_cccd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_read_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_store_read_cccd &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
</UL>

<P><STRONG><a name="[415]"></a>ble_store_read_our_sec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_read_our_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_store_read_our_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
</UL>

<P><STRONG><a name="[2f3]"></a>ble_store_read_peer_sec</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_store.o(i.ble_store_read_peer_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sec_req_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[34c]"></a>ble_store_util_bonded_peers</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_store_util.o(i.ble_store_util_bonded_peers))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ble_store_util_bonded_peers &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_except
</UL>

<P><STRONG><a name="[426]"></a>ble_store_util_delete_all</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_store_util.o(i.ble_store_util_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_store_util_delete_all &rArr; ble_store_delete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_iterate_replace_cccd
</UL>

<P><STRONG><a name="[34a]"></a>ble_store_util_delete_peer</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ble_store_util.o(i.ble_store_util_delete_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_store_util_delete_peer &rArr; ble_store_delete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_delete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[3f]"></a>ble_store_util_status_rr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_store_util.o(i.ble_store_util_status_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ble_store_util_status_rr &rArr; ble_gap_unpair_oldest_except &rArr; ble_store_util_bonded_peers &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_peer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_unpair_oldest_except
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_init)
</UL>
<P><STRONG><a name="[368]"></a>ble_store_write_cccd</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_store.o(i.ble_store_write_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_store_write_cccd &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_restored
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_bonding_established
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
</UL>

<P><STRONG><a name="[41a]"></a>ble_store_write_our_sec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_store.o(i.ble_store_write_our_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_store_write_our_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[41b]"></a>ble_store_write_peer_sec</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ble_store.o(i.ble_store_write_peer_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_store_write_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[2b2]"></a>ble_svc_gap_device_name_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_svc_gap.o(i.ble_svc_gap_device_name_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_svc_gap_device_name_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[379]"></a>ble_transport_alloc_acl_from_ll</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, transport.o(i.ble_transport_alloc_acl_from_ll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_transport_alloc_acl_from_ll &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_acl_ll_to_host_cbk
</UL>

<P><STRONG><a name="[39e]"></a>ble_transport_alloc_cmd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, transport.o(i.ble_transport_alloc_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_transport_alloc_cmd &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
</UL>

<P><STRONG><a name="[37b]"></a>ble_transport_alloc_evt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, transport.o(i.ble_transport_alloc_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_transport_alloc_evt &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_evt_ll_to_host_cbk
</UL>

<P><STRONG><a name="[38b]"></a>ble_transport_free</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, transport.o(i.ble_transport_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_transport_free &rArr; os_memblock_from &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_from
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_cmd_impl
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
</UL>

<P><STRONG><a name="[429]"></a>ble_transport_hs_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_hs.o(i.ble_transport_hs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_transport_hs_init &rArr; ble_hs_init &rArr; ble_gap_init &rArr; npl_freertos_mutex_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[42a]"></a>ble_transport_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, transport.o(i.ble_transport_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_transport_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_ext_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[37a]"></a>ble_transport_to_hs_acl_impl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_hs.o(i.ble_transport_to_hs_acl_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_transport_to_hs_acl_impl &rArr; ble_mqueue_put &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_flow_track_data_mbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_acl_ll_to_host_cbk
</UL>

<P><STRONG><a name="[37c]"></a>ble_transport_to_hs_evt_impl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_hs.o(i.ble_transport_to_hs_evt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_transport_to_hs_evt_impl &rArr; ble_hs_hci_rx_evt &rArr; ble_hs_enqueue_hci_event &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_evt_ll_to_host_cbk
</UL>

<P><STRONG><a name="[3d9]"></a>ble_transport_to_ll_acl_impl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nimble_glue_spark.o(i.ble_transport_to_ll_acl_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_transport_to_ll_acl_impl &rArr; pan_ble_hci_acl_nimble_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_acl_nimble_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_tx_data
</UL>

<P><STRONG><a name="[39f]"></a>ble_transport_to_ll_cmd_impl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.ble_transport_to_ll_cmd_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_transport_to_ll_cmd_impl &rArr; pan_ble_hci_cmd_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_cmd_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_send_buf
</UL>

<P><STRONG><a name="[2f5]"></a>ble_uuid_cmp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_uuid.o(i.ble_uuid_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_find_by_uuid
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_dsc_find_uuid
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_chr_find_uuid
</UL>

<P><STRONG><a name="[29e]"></a>ble_uuid_flat</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_uuid.o(i.ble_uuid_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_uuid_flat &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
</UL>

<P><STRONG><a name="[353]"></a>ble_uuid_init_from_att_buf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_uuid.o(i.ble_uuid_init_from_att_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_uuid_init_from_att_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
</UL>

<P><STRONG><a name="[2bc]"></a>ble_uuid_init_from_att_mbuf</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ble_uuid.o(i.ble_uuid_init_from_att_mbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_uuid_init_from_att_mbuf &rArr; os_mbuf_copydata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
</UL>

<P><STRONG><a name="[306]"></a>ble_uuid_init_from_buf</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_uuid.o(i.ble_uuid_init_from_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_uuid_init_from_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
</UL>

<P><STRONG><a name="[2e0]"></a>ble_uuid_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_uuid.o(i.ble_uuid_length))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
</UL>

<P><STRONG><a name="[29d]"></a>ble_uuid_to_mbuf</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_uuid.o(i.ble_uuid_to_mbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_uuid_to_mbuf &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[2ff]"></a>ble_uuid_u16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_uuid.o(i.ble_uuid_u16))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
</UL>

<P><STRONG><a name="[2a6]"></a>blecent_scan</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, main.o(i.blecent_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = blecent_scan &rArr; ble_gap_disc &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_entry
</UL>

<P><STRONG><a name="[2a4]"></a>central_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(i.central_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = central_write &rArr; ble_gattc_write_flat &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_entry
</UL>

<P><STRONG><a name="[266]"></a>check_info_tlv_data</STRONG> (Thumb, 302 bytes, Stack size 544 bytes, rf_ft.o(i.check_info_tlv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = check_info_tlv_data &rArr; tlv_init_iter &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadInfoArea
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_init_iter
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[43d]"></a>cy_rtos_mutex_get</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mtb_kvstore.o(i.cy_rtos_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cy_rtos_mutex_get &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[434]"></a>data_printf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_at.o(i.data_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = data_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[2ad]"></a>db_set_bd_address</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.db_set_bd_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = db_set_bd_address &rArr; pan_misc_set_bd_addr &rArr; LL_SetBdAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_misc_set_bd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[26a]"></a>dcoc_calibration_process</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, rf_misc.o(i.dcoc_calibration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dcoc_calibration_process &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_read_from_type
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_data_is_valid
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcoc_in_abs_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[441]"></a>default_data_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart_at.o(i.default_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
</UL>

<P><STRONG><a name="[fb]"></a>double_jacobian_default</STRONG> (Thumb, 550 bytes, Stack size 208 bytes, ecc.o(i.double_jacobian_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = double_jacobian_default &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ecc.o(.constdata)
<LI> ble_sm_alg.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[2b0]"></a>gatt_svr_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gatt_svr.o(i.gatt_svr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gatt_svr_init &rArr; ble_gatts_add_svcs &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_count_cfg
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[3f6]"></a>get_be32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, endian.o(i.get_be32))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
</UL>

<P><STRONG><a name="[2bb]"></a>get_le16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endian.o(i.get_le16))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_adata
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
</UL>

<P><STRONG><a name="[342]"></a>get_le32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, endian.o(i.get_le32))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_buf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
</UL>

<P><STRONG><a name="[6a]"></a>host_copydata</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.host_copydata))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = host_copydata &rArr; os_mbuf_copydata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(i.ll_init)
</UL>
<P><STRONG><a name="[422]"></a>host_kvstore_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mtb_init.o(i.host_kvstore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = host_kvstore_init &rArr; mtb_kvstore_init &rArr; _mtb_kvstore_garbage_collection &rArr; _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_init
</UL>

<P><STRONG><a name="[2b4]"></a>hs_thread_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nimble_glue_spark.o(i.hs_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hs_thread_init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[264]"></a>info_data_is_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_ft.o(i.info_data_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyConfig
</UL>

<P><STRONG><a name="[26c]"></a>info_read_from_type</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rf_ft.o(i.info_read_from_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadInfoArea
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_value_init_from_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init_from_info
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process
</UL>

<P><STRONG><a name="[446]"></a>ll_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.ll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ll_init &rArr; pan_ble_init &rArr; LL_Init &rArr; BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ll_register_semphr_cback
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ll_register_hostcopy_cb
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[44b]"></a>load_config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, uart_at.o(i.load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = load_config &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadStream
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_data_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_at_init
</UL>

<P><STRONG><a name="[475]"></a>mac_addr_str_to_hex</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart_at.o(i.mac_addr_str_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mac_addr_str_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, os_setup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = main &rArr; nimble_port_init &rArr; ll_init &rArr; pan_ble_init &rArr; LL_Init &rArr; BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_APB1PeriphClockCmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_early
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_misc_register_print
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan10x_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3b0]"></a>mem_init_mbuf_pool</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mem.o(i.mem_init_mbuf_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[396]"></a>mem_split_frag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mem.o(i.mem_split_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
</UL>

<P><STRONG><a name="[445]"></a>mtb_kvstore_init</STRONG> (Thumb, 1228 bytes, Stack size 120 bytes, mtb_kvstore.o(i.mtb_kvstore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mtb_kvstore_init &rArr; _mtb_kvstore_garbage_collection &rArr; _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_rtos_mutex_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_unlock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_read_record
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_garbage_collection
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_find_record_in_ram_table
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_kvstore_init
</UL>

<P><STRONG><a name="[2ae]"></a>nimble_port_get_dflt_eventq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nimble_port.o(i.nimble_port_get_dflt_eventq))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[451]"></a>nimble_port_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nimble_port.o(i.nimble_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = nimble_port_init &rArr; ll_init &rArr; pan_ble_init &rArr; LL_Init &rArr; BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_hs_init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_module_init
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d3]"></a>nimble_port_run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nimble_port.o(i.nimble_port_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nimble_port_run &rArr; npl_freertos_eventq_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_thread_entry
</UL>

<P><STRONG><a name="[2af]"></a>npl_freertos_callout_init</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, npl_os_freertos.o(i.npl_freertos_callout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = npl_freertos_callout_init &rArr; xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>

<P><STRONG><a name="[3d6]"></a>npl_freertos_callout_reset</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, npl_os_freertos.o(i.npl_freertos_callout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
</UL>

<P><STRONG><a name="[458]"></a>npl_freertos_eventq_get</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, npl_os_freertos.o(i.npl_freertos_eventq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = npl_freertos_eventq_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_run
</UL>

<P><STRONG><a name="[38a]"></a>npl_freertos_eventq_put</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, npl_os_freertos.o(i.npl_freertos_eventq_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hw_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_start_stage1
</UL>

<P><STRONG><a name="[330]"></a>npl_freertos_mutex_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = npl_freertos_mutex_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
</UL>

<P><STRONG><a name="[3a0]"></a>npl_freertos_mutex_pend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = npl_freertos_mutex_pend &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>

<P><STRONG><a name="[3a2]"></a>npl_freertos_mutex_release</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>

<P><STRONG><a name="[3af]"></a>npl_freertos_sem_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = npl_freertos_sem_init &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_init
</UL>

<P><STRONG><a name="[3a1]"></a>npl_freertos_sem_pend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, npl_os_freertos.o(i.npl_freertos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = npl_freertos_sem_pend &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>

<P><STRONG><a name="[3b3]"></a>npl_freertos_sem_release</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, npl_os_freertos.o(i.npl_freertos_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = npl_freertos_sem_release &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>

<P><STRONG><a name="[315]"></a>npl_freertos_time_ms_to_ticks</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, npl_os_freertos.o(i.npl_freertos_time_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
</UL>

<P><STRONG><a name="[2ba]"></a>os_mbuf_adj</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_adj &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_notify
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_type
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_read_group_type
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_prep_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_type_value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_rx_find_info
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx
</UL>

<P><STRONG><a name="[29f]"></a>os_mbuf_append</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, os_mbuf.o(i.os_mbuf_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copyinto
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_acl_ll_to_host_cbk
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_heart_rate
</UL>

<P><STRONG><a name="[302]"></a>os_mbuf_appendfrom</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, os_mbuf.o(i.os_mbuf_appendfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
</UL>

<P><STRONG><a name="[300]"></a>os_mbuf_cmpf</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, os_mbuf.o(i.os_mbuf_cmpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_mbuf_cmpf &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
</UL>

<P><STRONG><a name="[360]"></a>os_mbuf_cmpm</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, os_mbuf.o(i.os_mbuf_cmpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = os_mbuf_cmpm &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
</UL>

<P><STRONG><a name="[2d7]"></a>os_mbuf_concat</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, os_mbuf.o(i.os_mbuf_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_mbuf_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
</UL>

<P><STRONG><a name="[2ea]"></a>os_mbuf_copydata</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_mbuf.o(i.os_mbuf_copydata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_copydata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_rx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_data_hdr_strip
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_rx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_copydata
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_svr_chr_access_uart_read_write
</UL>

<P><STRONG><a name="[3c8]"></a>os_mbuf_copyinto</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, os_mbuf.o(i.os_mbuf_copyinto))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
</UL>

<P><STRONG><a name="[2e4]"></a>os_mbuf_extend</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_access
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>

<P><STRONG><a name="[2d8]"></a>os_mbuf_free_chain</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_free_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbuf_free_chain &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_rsp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_get
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_write_req
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_notify
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_indicate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_uuid_rx_adata
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_acl_pkt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_acl_impl
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_hs_acl_impl
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_dsc_access
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_val_access
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_invalid_cid_tx
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_remove_rx
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_dhkey_check_exec
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_exch_exec
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_acl_ll_to_host_cbk
</UL>

<P><STRONG><a name="[461]"></a>os_mbuf_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get_pkthdr
</UL>

<P><STRONG><a name="[3ac]"></a>os_mbuf_get_pkthdr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_get_pkthdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_frag_alloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_acl_from_ll
</UL>

<P><STRONG><a name="[3dd]"></a>os_mbuf_pack_chains</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, os_mbuf.o(i.os_mbuf_pack_chains))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mbuf_pack_chains &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
</UL>

<P><STRONG><a name="[42c]"></a>os_mbuf_pool_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_mbuf.o(i.os_mbuf_pool_init))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_init
</UL>

<P><STRONG><a name="[305]"></a>os_mbuf_prepend</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, os_mbuf.o(i.os_mbuf_prepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbuf_prepend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
</UL>

<P><STRONG><a name="[3e2]"></a>os_mbuf_prepend_pullup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_prepend_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_mbuf_prepend_pullup &rArr; os_mbuf_prepend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
</UL>

<P><STRONG><a name="[36c]"></a>os_mbuf_pullup</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, os_mbuf.o(i.os_mbuf_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend_pullup
</UL>

<P><STRONG><a name="[453]"></a>os_mbuf_trim_front</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_trim_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_trim_front &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_split_frag
</UL>

<P><STRONG><a name="[428]"></a>os_memblock_from</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_mempool.o(i.os_memblock_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_memblock_from &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
</UL>

<P><STRONG><a name="[2fd]"></a>os_memblock_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_mempool.o(i.os_memblock_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_alloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_register
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_cmd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_enqueue_hci_event
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_alloc_evt
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_svc_disced
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_dsc_disced
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_chr_disced
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_add
</UL>

<P><STRONG><a name="[2f9]"></a>os_memblock_put</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_mempool.o(i.os_memblock_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_prepend
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_prep_clear
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_conn_broken
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_alloc
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_connection_broken
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_chan_free
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_free
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_rx_hci_ev
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update_rsp_rx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_rx_reject
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pack_chains
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_trim_front
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_all
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_delete
</UL>

<P><STRONG><a name="[427]"></a>os_memblock_put_from_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, os_mempool.o(i.os_memblock_put_from_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memblock_put_from_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_acl_put
</UL>

<P><STRONG><a name="[42b]"></a>os_mempool_ext_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_mempool.o(i.os_mempool_ext_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mempool_ext_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_init
</UL>

<P><STRONG><a name="[2f7]"></a>os_mempool_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_mempool.o(i.os_mempool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_init
</UL>

<P><STRONG><a name="[456]"></a>os_mempool_module_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_mempool.o(i.os_mempool_module_init))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[3c7]"></a>os_msys_get_pkthdr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_mbuf.o(i.os_msys_get_pkthdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_acl_pkt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>

<P><STRONG><a name="[457]"></a>os_msys_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_msys_init.o(i.os_msys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_msys_init &rArr; mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_reset
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_register
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[463]"></a>os_msys_register</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_mbuf.o(i.os_msys_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_msys_register
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[462]"></a>os_msys_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_mbuf.o(i.os_msys_reset))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[450]"></a>pan10x_init</STRONG> (Thumb, 338 bytes, Stack size 296 bytes, os_setup.o(i.pan10x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pan10x_init &rArr; SystemHwParamLoader &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_SetSleepMode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHwParamLoader
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_misc_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ac]"></a>pan10x_mac_addr_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_setup.o(i.pan10x_mac_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pan10x_mac_addr_get &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[42e]"></a>pan_ble_hci_acl_nimble_handle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pan_ble_stack.o(i.pan_ble_hci_acl_nimble_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pan_ble_hci_acl_nimble_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_NotifyRxHciPkt
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_GetRxAclFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_acl_impl
</UL>

<P><STRONG><a name="[42f]"></a>pan_ble_hci_cmd_handle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pan_ble_stack.o(i.pan_ble_hci_cmd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pan_ble_hci_cmd_handle &rArr; LHCI_NotifyRxHciPkt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_NotifyRxHciPkt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_GetRxCmdFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transport_to_ll_cmd_impl
</UL>

<P><STRONG><a name="[449]"></a>pan_ble_hci_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pan_ble_stack.o(i.pan_ble_hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pan_ble_hci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_RegisterHciTxCback
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>

<P><STRONG><a name="[44a]"></a>pan_ble_init</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, pan_ble_stack.o(i.pan_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = pan_ble_init &rArr; LL_Init &rArr; BB_Init &rArr; RF_PhyInit &rArr; RF_PhyConfig &rArr; phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufInit
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvInit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PmInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeapInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxPower
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>

<P><STRONG><a name="[447]"></a>pan_ll_register_hostcopy_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pan_ble_stack.o(i.pan_ll_register_hostcopy_cb))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>

<P><STRONG><a name="[448]"></a>pan_ll_register_semphr_cback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pan_ble_stack.o(i.pan_ll_register_semphr_cback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pan_ll_register_semphr_cback
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_RegisterSemphrCback
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>

<P><STRONG><a name="[44f]"></a>pan_misc_register_print</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pan_ble_stack.o(i.pan_misc_register_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pan_misc_register_print
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackRegisterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[440]"></a>pan_misc_set_bd_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pan_ble_stack.o(i.pan_misc_set_bd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pan_misc_set_bd_addr &rArr; LL_SetBdAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetBdAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_bd_address
</UL>

<P><STRONG><a name="[431]"></a>peer_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, peer.o(i.peer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_add &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[436]"></a>peer_chr_find_uuid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, peer.o(i.peer_chr_find_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = peer_chr_find_uuid &rArr; ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
</UL>

<P><STRONG><a name="[433]"></a>peer_delete</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peer.o(i.peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_delete &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[432]"></a>peer_disc_all</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, peer.o(i.peer_disc_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = peer_disc_all &rArr; ble_gattc_disc_all_svcs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[437]"></a>peer_dsc_find_uuid</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, peer.o(i.peer_dsc_find_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = peer_dsc_find_uuid &rArr; ble_uuid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_disc_complete
</UL>

<P><STRONG><a name="[2b1]"></a>peer_init</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, peer.o(i.peer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = peer_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[2a5]"></a>peri_notify</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.peri_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = peri_notify &rArr; ble_gatts_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_entry
</UL>

<P><STRONG><a name="[265]"></a>phy_init_from_info</STRONG> (Thumb, 104 bytes, Stack size 624 bytes, rf_ft.o(i.phy_init_from_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = phy_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_read_from_type
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyConfig
</UL>

<P><STRONG><a name="[267]"></a>phy_value_init_from_code</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, rf_ft.o(i.phy_value_init_from_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phy_value_init_from_code &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[26b]"></a>phy_value_init_from_info</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, rf_ft.o(i.phy_value_init_from_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phy_value_init_from_info &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_read_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[472]"></a>print_bytes</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, misc.o(i.print_bytes), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[430]"></a>print_conn_desc</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, misc.o(i.print_conn_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_conn_desc &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_gap_event
</UL>

<P><STRONG><a name="[438]"></a>print_mbuf</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, misc.o(i.print_mbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_mbuf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_read
</UL>

<P><STRONG><a name="[27c]"></a>proj_uart_at_handle</STRONG> (Thumb, 2244 bytes, Stack size 184 bytes, uart_at.o(i.proj_uart_at_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = proj_uart_at_handle &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ResetChip
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_delay_10nop
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteStream
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseSector
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_addr_str_to_hex
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_data_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleProc
</UL>

<P><STRONG><a name="[2a2]"></a>put_le16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endian.o(i.put_le16))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_acl_tx_now
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_clt_cfg_access
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_inc_access
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_chr_def_access
</UL>

<P><STRONG><a name="[2a0]"></a>put_le32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, endian.o(i.put_le32))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[30a]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_start
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_init
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[4ac]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[460]"></a>pvTimerGetTimerID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
</UL>

<P><STRONG><a name="[4a8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[366]"></a>realloc</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; __malloc$realloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_add_svcs
</UL>

<P><STRONG><a name="[48b]"></a>regularize_k</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ecc.o(i.regularize_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = regularize_k &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[48c]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3ec]"></a>swap_buf</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, endian.o(i.swap_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[3ef]"></a>swap_in_place</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, endian.o(i.swap_in_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = swap_in_place
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[44c]"></a>sys_clock_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, os_setup.o(i.sys_clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sys_clock_Init &rArr; CLK_RefClkSrcConfig &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SYSCLKConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_RefClkSrcConfig
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_AHBPeriphClockCmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSystemClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ed]"></a>tc_aes128_set_encrypt_key</STRONG> (Thumb, 166 bytes, Stack size 60 bytes, aes_encrypt.o(i.tc_aes128_set_encrypt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tc_aes128_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[3ee]"></a>tc_aes_encrypt</STRONG> (Thumb, 1470 bytes, Stack size 96 bytes, aes_encrypt.o(i.tc_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_byte
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_s1
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_c1
</UL>

<P><STRONG><a name="[3e9]"></a>tc_cmac_final</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cmac_mode.o(i.tc_cmac_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tc_cmac_final &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
</UL>

<P><STRONG><a name="[3e7]"></a>tc_cmac_setup</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, cmac_mode.o(i.tc_cmac_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tc_cmac_setup &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes128_set_encrypt_key
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
</UL>

<P><STRONG><a name="[3e8]"></a>tc_cmac_update</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, cmac_mode.o(i.tc_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_aes_encrypt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_aes_cmac
</UL>

<P><STRONG><a name="[43c]"></a>tlv_init_iter</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, rf_ft.o(i.tlv_init_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tlv_init_iter &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadInfoArea
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_info_tlv_data
</UL>

<P><STRONG><a name="[492]"></a>uECC_generate_random_int</STRONG> (Thumb, 256 bytes, Stack size 104 bytes, ecc.o(i.uECC_generate_random_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = uECC_generate_random_int &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[493]"></a>uECC_get_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecc.o(i.uECC_get_rng))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[3fb]"></a>uECC_make_key</STRONG> (Thumb, 144 bytes, Stack size 192 bytes, ecc_dh.o(i.uECC_make_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_get_rng
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
</UL>

<P><STRONG><a name="[3f1]"></a>uECC_set_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecc.o(i.uECC_set_rng))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_ecc_init
</UL>

<P><STRONG><a name="[3f9]"></a>uECC_shared_secret</STRONG> (Thumb, 186 bytes, Stack size 184 bytes, ecc_dh.o(i.uECC_shared_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>

<P><STRONG><a name="[497]"></a>uECC_valid_point</STRONG> (Thumb, 242 bytes, Stack size 160 bytes, ecc.o(i.uECC_valid_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uECC_valid_point &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
</UL>

<P><STRONG><a name="[3f8]"></a>uECC_valid_public_key</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, ecc.o(i.uECC_valid_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = uECC_valid_public_key &rArr; uECC_valid_point &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>

<P><STRONG><a name="[496]"></a>uECC_vli_bytesToNative</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ecc.o(i.uECC_vli_bytesToNative))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uECC_vli_bytesToNative
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[498]"></a>uECC_vli_cmp_unsafe</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ecc.o(i.uECC_vli_cmp_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
</UL>

<P><STRONG><a name="[157]"></a>uECC_vli_isZero</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ecc.o(i.uECC_vli_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[494]"></a>uECC_vli_mmod</STRONG> (Thumb, 528 bytes, Stack size 248 bytes, ecc.o(i.uECC_vli_mmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uECC_vli_mmod
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[27e]"></a>uECC_vli_modAdd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ecc.o(i.uECC_vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uECC_vli_modAdd &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[15f]"></a>uECC_vli_modInv</STRONG> (Thumb, 726 bytes, Stack size 192 bytes, ecc.o(i.uECC_vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uECC_vli_modInv &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[495]"></a>uECC_vli_nativeToBytes</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ecc.o(i.uECC_vli_nativeToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[159]"></a>uECC_vli_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_set))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[15d]"></a>uECC_vli_sub</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, ecc.o(i.uECC_vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[2ab]"></a>uart_at_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart_at.o(i.uart_at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_at_init &rArr; UART_Init &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_APB2PeriphClockCmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[478]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[3b2]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_rx_evt
</UL>

<P><STRONG><a name="[481]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[47e]"></a>vApplicationIdleHook</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[48a]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, os_setup.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationMallocFailedHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[47f]"></a>vApplicationUserHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nimble_glue_spark.o(i.vApplicationUserHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vApplicationUserHook &rArr; pan_update_stimer &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_update_stimer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4a2]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[4a7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[479]"></a>vListInsert</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[3e4]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>

<P><STRONG><a name="[47c]"></a>vPortFree</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[49b]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[490]"></a>vPortSystemClockEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_setup.o(i.vPortSystemClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clock_Init
</UL>

<P><STRONG><a name="[47d]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4ab]"></a>vQueueAddToRegistry</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[455]"></a>vQueueDelete</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[487]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[43a]"></a>vTaskDelay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_sync
</UL>

<P><STRONG><a name="[4a3]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[489]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[49d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[49c]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[49e]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[452]"></a>vTaskStartScheduler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[485]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fd]"></a>vli_mmod_fast_secp256r1</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, ecc.o(i.vli_mmod_fast_secp256r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vli_mmod_fast_secp256r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ecc.o(.constdata)
<LI> ble_sm_alg.o(.constdata)
</UL>
<P><STRONG><a name="[4a0]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[45e]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
</UL>

<P><STRONG><a name="[454]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_init
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[2a9]"></a>xQueueGenericCreate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_init
</UL>

<P><STRONG><a name="[27b]"></a>xQueueGenericSend</STRONG> (Thumb, 488 bytes, Stack size 80 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_unlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_uart_at_handle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HandleProc
</UL>

<P><STRONG><a name="[45d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
</UL>

<P><STRONG><a name="[45f]"></a>xQueueGiveFromISR</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
</UL>

<P><STRONG><a name="[292]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_release
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_unlock
</UL>

<P><STRONG><a name="[45c]"></a>xQueueReceive</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
</UL>

<P><STRONG><a name="[45b]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
</UL>

<P><STRONG><a name="[43f]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_mutex_pend
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_rtos_mutex_get
</UL>

<P><STRONG><a name="[4a4]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[2a8]"></a>xTaskCreate</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_thread_init
</UL>

<P><STRONG><a name="[3c5]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_parent_task
</UL>

<P><STRONG><a name="[3c4]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_is_parent_task
</UL>

<P><STRONG><a name="[45a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
</UL>

<P><STRONG><a name="[303]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_status
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_update
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_rx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[47b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[4a9]"></a>xTaskPriorityInherit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[482]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[486]"></a>xTaskResumeAll</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[459]"></a>xTimerCreate</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
</UL>

<P><STRONG><a name="[49f]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3d1]"></a>xTimerGenericCommand</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_stop_terminate_timeout_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_tx_hrate
</UL>

<P><STRONG><a name="[3d8]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timers.o(i.xTimerGetExpiryTime))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>

<P><STRONG><a name="[3d7]"></a>xTimerIsTimerActive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>

<P><STRONG><a name="[fc]"></a>x_side_default</STRONG> (Thumb, 138 bytes, Stack size 128 bytes, ecc.o(i.x_side_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = x_side_default &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ecc.o(.constdata)
<LI> ble_sm_alg.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, queue.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList (via Veneer)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit (via Veneer)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut (via Veneer)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList (via Veneer)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState (via Veneer)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll (via Veneer)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical (via Veneer)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend (via Veneer)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cy_rtos_mutex_get (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_thread_entry (via Veneer)
</UL>

<P><STRONG><a name="[4aa]"></a>xTaskIncrementTick</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4ad]"></a>vTaskSwitchContext</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, tasks.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[3e3]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut (via Veneer)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive (via Veneer)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend (via Veneer)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive (via Veneer)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate (via Veneer)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID (via Veneer)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get (via Veneer)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_put (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get (via Veneer)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb (via Veneer)
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR (via Veneer)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR (via Veneer)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ll_semphr_cback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nimble_glue_spark.o(.ramfunc))
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(i.ll_init)
</UL>
<P><STRONG><a name="[13]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nimble_glue_spark.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC_IRQHandler &rArr; pan_ble_handle &rArr; MDC_Start &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LL_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nimble_glue_spark.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LL_IRQHandler &rArr; pan_ble_irq &rArr; BLE_IRQHandler &rArr; SCH_IRQCmdDoneHandle &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_panseries.o(RESET)
</UL>
<P><STRONG><a name="[4af]"></a>pan_ble_irq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pan_ble_stack.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pan_ble_irq &rArr; BLE_IRQHandler &rArr; SCH_IRQCmdDoneHandle &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler
</UL>

<P><STRONG><a name="[4ae]"></a>pan_ble_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pan_ble_stack.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pan_ble_handle &rArr; MDC_Start &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[49a]"></a>pan_update_stimer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pan_ble_stack.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pan_update_stimer &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationUserHook (via Veneer)
</UL>

<P><STRONG><a name="[4b1]"></a>BB_ResetCommon</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPhySpiClk
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyResetSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SleepRestore
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
</UL>

<P><STRONG><a name="[13f]"></a>BB_SetPwrModeEx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BB_SetPwrModeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Init (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2 (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1 (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SleepRestore
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
</UL>

<P><STRONG><a name="[13e]"></a>BB_Reset</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_ResetCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStop (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2 (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1 (via Veneer)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IsBusy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset (via Veneer)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanEvtHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler
</UL>

<P><STRONG><a name="[4b3]"></a>BB_SleepRestore</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bb.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_ResetCommon
</UL>

<P><STRONG><a name="[4ff]"></a>clktrim_measure_32k_clk_stop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bb.o(.ramfunc), UNUSED)

<P><STRONG><a name="[137]"></a>clktrim_measure_32k_clk_start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clktrim_measure_32k_clk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetCalWaitCnt (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRIM_SetCalCnt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_32kTrackingInit (via Veneer)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Start32kRCMeasure
</UL>

<P><STRONG><a name="[1d1]"></a>BB_SetPwrMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BB_SetPwrMode &rArr; BB_SetPwrModeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrModeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler (via Veneer)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[141]"></a>BB_SetBlePhy</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BB_SetBlePhy &rArr; RF_SetBlePhy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetBlePhy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2 (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1 (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[4b5]"></a>BB_SetBleChannel</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BB_SetBleChannel &rArr; RF_SetChannel &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[4d4]"></a>BB_SetMaxMoreDataNum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bb.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
</UL>

<P><STRONG><a name="[246]"></a>BB_SetRxBuf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bb.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBFifo
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanPduHandler (via Veneer)
</UL>

<P><STRONG><a name="[4cf]"></a>BB_SetTxBuf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bb.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBFifo
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[1cb]"></a>BB_UsToTick</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BB_UsToTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopSlvConnEvt (via Veneer)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust (via Veneer)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AdjustEventAnchorPoint
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertAdvItemToQueue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable (via Veneer)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConn (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingSubUs
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler
</UL>

<P><STRONG><a name="[1c0]"></a>BB_TickToUs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bb.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CalcWinWidening (via Veneer)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingSubUs
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[500]"></a>BB_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bb.o(.ramfunc), UNUSED)

<P><STRONG><a name="[252]"></a>BB_IsTimeExpired</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BB_IsTimeExpired &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvDirectAdvTimeoutHandler (via Veneer)
</UL>

<P><STRONG><a name="[4b6]"></a>BB_Start32kRCMeasure</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BB_Start32kRCMeasure &rArr; LL_SendMdcEvt &rArr; MDC_SendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clktrim_measure_32k_clk_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>BB_Get32kRCMeasureValue</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BB_Get32kRCMeasureValue &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgHandler (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>BB_DebugReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bb.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BB_DebugReset &rArr; BB_SetDebugChn
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetDebugChn (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb.o(i.BB_DebugInit)
</UL>
<P><STRONG><a name="[1d5]"></a>LL_AllocConnCtxEx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ll_conn.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AllocConnCtxEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler
</UL>

<P><STRONG><a name="[4b7]"></a>LL_FindActMst</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ll_conn.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_FindActMst &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler
</UL>

<P><STRONG><a name="[4b8]"></a>LL_StartMstConnEvt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ll_conn_mst.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_StartMstConnEvt &rArr; LL_ConnEvtStartHandler &rArr; LL_PushPktToBBTxFifo &rArr; LL_PushPktToBBFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingCodeExe
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstConnEvtHandler
</UL>

<P><STRONG><a name="[32]"></a>LL_MstConnEvtHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ll_conn_mst.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LL_MstConnEvtHandler &rArr; LL_ConnEvtStopHandler &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_conn_mst.o(i.LL_MstInit)
</UL>
<P><STRONG><a name="[4bb]"></a>LL_StartSlvConnEvt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ll_conn_slv.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LL_StartSlvConnEvt &rArr; LL_ConnEvtStartHandler &rArr; LL_PushPktToBBTxFifo &rArr; LL_PushPktToBBFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingCodeExe
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvConnEvtHandler
</UL>

<P><STRONG><a name="[4bc]"></a>LL_TimingAddUs</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ll_int.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_TimingAddUs &rArr; BB_UsToTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_TickToUs
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AdjustEventAnchorPoint
</UL>

<P><STRONG><a name="[1c9]"></a>LL_TimingSubUs</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ll_int.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_TimingSubUs &rArr; BB_UsToTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_TickToUs
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust (via Veneer)
</UL>

<P><STRONG><a name="[501]"></a>SCH_TimeOverlap</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sch_main.o(.ramfunc), UNUSED)

<P><STRONG><a name="[4bd]"></a>SCH_InsertItemToQueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCH_InsertItemToQueue &rArr; QUEUE_InsertElement
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
</UL>

<P><STRONG><a name="[4be]"></a>SCH_InsertAdvItemToQueue</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SCH_InsertAdvItemToQueue &rArr; BB_UsToTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
</UL>

<P><STRONG><a name="[4bf]"></a>SCH_ItemRemovePostHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sch_main.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler (via Veneer)
</UL>

<P><STRONG><a name="[4c0]"></a>SCH_RemoveInvalidItem</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCH_RemoveInvalidItem &rArr; LL_DisconnCmplHandler &rArr; LL_NotifyDisconnCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DisconnCmplHandler (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
</UL>

<P><STRONG><a name="[4c1]"></a>SCH_AdjustEventAnchorPoint</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, sch_main.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
</UL>

<P><STRONG><a name="[4c3]"></a>SCH_IRQTimingHandle</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sch_main.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQUpdReqHandler
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IsBusy
</UL>

<P><STRONG><a name="[4c2]"></a>SCH_IsBusy</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SCH_IsBusy &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQTimingHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
</UL>

<P><STRONG><a name="[26d]"></a>SCH_Switch</STRONG> (Thumb, 1476 bytes, Stack size 80 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement (via Veneer)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum (via Veneer)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScheduler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScan
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IsBusy
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveInvalidItem
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertAdvItemToQueue
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertItemToQueue
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem (via Veneer)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQUpdReqHandler
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx (via Veneer)
</UL>

<P><STRONG><a name="[4c5]"></a>SCH_IRQCmdDoneHandle</STRONG> (Thumb, 978 bytes, Stack size 80 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SCH_IRQCmdDoneHandle &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartAuthTimer (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnTxEnd (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CalcRssi (via Veneer)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MathGetNumBitsSet (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingAdv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQTimingHandle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[4c8]"></a>SCH_IRQUpdReqHandler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCH_IRQUpdReqHandler &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQTimingHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[4b0]"></a>BLE_IRQHandler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, sch_main.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BLE_IRQHandler &rArr; SCH_IRQCmdDoneHandle &rArr; SCH_Switch &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Start32kRCMeasure
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQUpdReqHandler
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQTimingHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_irq
</UL>

<P><STRONG><a name="[140]"></a>RF_EnableLDO</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RF_EnableLDO
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2 (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1 (via Veneer)
</UL>

<P><STRONG><a name="[502]"></a>RF_DisableLDO</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rf_phy.o(.ramfunc), UNUSED)

<P><STRONG><a name="[4b2]"></a>RF_PhyResetSeq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_ResetCommon
</UL>

<P><STRONG><a name="[142]"></a>RF_SetChannel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF_SetChannel &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV2 (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartTransimitterV1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV2 (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_DtmStartReceiverV1 (via Veneer)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBleChannel
</UL>

<P><STRONG><a name="[4cd]"></a>RF_GetTxSettleTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[4ce]"></a>RF_GetRxSettleTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[1d0]"></a>RF_EnablePhy</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_EnablePhy &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler (via Veneer)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[4b4]"></a>RF_SetBlePhy</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rf_phy.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_SetBlePhy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy
</UL>

<P><STRONG><a name="[4c9]"></a>MDC_TimerRemove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stimer.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement (via Veneer)
</UL>

<P><STRONG><a name="[4ca]"></a>MDC_TimerInsert</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stimer.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement (via Veneer)
</UL>

<P><STRONG><a name="[4cb]"></a>MDC_TimerTicksToRtc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stimer.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[258]"></a>MDC_TimerSleepUpdate</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, stimer.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerReady (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_update_stimer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start (via Veneer)
</UL>

<P><STRONG><a name="[131]"></a>xmemcpy</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, utils.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xmemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan_ble_hci_cmd_handle (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxQueueHandler (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxAclDataPendingHandler (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendPkt (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncRsp (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendEncReq (via Veneer)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendConnChnMapInd (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyReadRemoteFeatCmpl (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendAcl (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxEvtHandler (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_TxAclHandler (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PduHandler (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PauseEncRspHandler (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DecodeCtrlPdu (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_PushEvtToTxFifo (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LE_SendEnhaneConnCmplEvt (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_SendCmdCmplEvt (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_LeControllerCmdHandler (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler (via Veneer)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanRspData (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvData (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_StartEncrypt (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_SetHostChnClass (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_LtkReqReplyHandler (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvDataUpdate (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendScanReport (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler (via Veneer)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler
</UL>

<P><STRONG><a name="[1fa]"></a>xmemcmp</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, utils.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xmemcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsConnExisted (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>xmemset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, utils.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmemset
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_ConnInit (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtx (via Veneer)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Init (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_Init (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncRspHandler (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncReqHandler (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHCI_InfoParamCmdHandler (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_SlvAdvInit (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_MstScanInit (via Veneer)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvEnable (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearWhiteList (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearResolveList (via Veneer)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init (via Veneer)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMGR_Init (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_WhiteListInit (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstInitiatorInit (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitWhiteListMem (via Veneer)
</UL>

<P><STRONG><a name="[4cc]"></a>LL_SlvAdvStart</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, ll_adv.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_SlvAdvStart &rArr; RF_EnablePhy &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingCodeExe
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxBuf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetRxBuf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetRxSettleTime
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetTxSettleTime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingAdv
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
</UL>

<P><STRONG><a name="[4d0]"></a>LL_SlvAdvStop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ll_adv.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingAdv
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
</UL>

<P><STRONG><a name="[37]"></a>LL_AdvEvtHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ll_adv.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_AdvEvtHandler &rArr; LL_NewTxPowerReqHandler &rArr; BB_SetTxPower &rArr; RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendMdcEvt (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrandNum (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingAdv
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adv.o(i.LL_SlvAdvInit)
</UL>
<P><STRONG><a name="[4d1]"></a>LL_GetChanIndex</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ll_conn_comm.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[1ca]"></a>LL_AdjustDataChannelIndexEx</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_AdjustDataChannelIndexEx &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrand
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtAdjust (via Veneer)
</UL>

<P><STRONG><a name="[1d8]"></a>LL_GetPduDurationTime</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnIndHandler (via Veneer)
</UL>

<P><STRONG><a name="[4d2]"></a>LL_PushPktToBBFifo</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_PushPktToBBFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxBuf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
</UL>

<P><STRONG><a name="[4d3]"></a>LL_PushPktToBBTxFifo</STRONG> (Thumb, 1032 bytes, Stack size 64 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_PushPktToBBTxFifo &rArr; LL_PushPktToBBFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxBuf
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetMaxMoreDataNum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBFifo
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPduDurationTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStartHandler
</UL>

<P><STRONG><a name="[30]"></a>LL_ConnEvtHandler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_ConnEvtHandler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingConnEvt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_conn.o(i.LL_ConnInit)
</UL>
<P><STRONG><a name="[1d3]"></a>LL_AdjustConnParam</STRONG> (Thumb, 1544 bytes, Stack size 88 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyPhyUpdCmpl (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDisconnCmpl (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyDataLenChangeCmpl (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyConnUpdCmpl (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_IsTimeExpired
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrand
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPduDurationTime
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IsPmEnable (via Veneer)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TimingAddUs
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtStopHandler (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AdjustEventAnchorPoint
</UL>

<P><STRONG><a name="[4ba]"></a>LL_ConnEvtStartHandler</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, ll_conn_comm.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LL_ConnEvtStartHandler &rArr; LL_PushPktToBBTxFifo &rArr; LL_PushPktToBBFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_TickToUs
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBleChannel
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PushPktToBBTxFifo
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetRxSettleTime
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetTxSettleTime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
</UL>

<P><STRONG><a name="[4d7]"></a>LL_MstCreateConnPostHandler</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, ll_pdu_scan.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LL_MstCreateConnPostHandler &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAlloc (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SendQueueMsg (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NotifyChnSelInd (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnCtx (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SelectNextChanIndex (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_BuildChanRemapTbl (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitiatorPduHandler
</UL>

<P><STRONG><a name="[33]"></a>LL_InitiatorPduHandler</STRONG> (Thumb, 612 bytes, Stack size 88 bytes, ll_pdu_scan.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LL_InitiatorPduHandler &rArr; LL_MstCreateConnPostHandler &rArr; BB_Reset &rArr; BB_ResetCommon &rArr; RF_PhyResetSeq &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FindActMst
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AllocConnCtxEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_UsToTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_scan.o(i.LL_MstInitiatorInit)
</UL>
<P><STRONG><a name="[503]"></a>LL_ScanRestart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ll_scan.o(.ramfunc), UNUSED)

<P><STRONG><a name="[4d8]"></a>LL_ScanStop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ll_scan.o(.ramfunc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScan
</UL>

<P><STRONG><a name="[4d9]"></a>LL_ScanStart</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, ll_scan.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_ScanStart &rArr; BB_SetBleChannel &rArr; RF_SetChannel &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingCodeExe
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_TickToUs
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetTxBuf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetRxBuf
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBleChannel
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetBlePhy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_SetPwrMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetRxSettleTime
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_GetTxSettleTime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanEvtHandler
</UL>

<P><STRONG><a name="[4c4]"></a>LL_TrackTimingScheduler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_track_timing.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
</UL>

<P><STRONG><a name="[4c6]"></a>LL_TrackTimingAdv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_track_timing.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvEvtHandler
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStop
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_IRQCmdDoneHandle
</UL>

<P><STRONG><a name="[251]"></a>LL_TrackTimingScan</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_track_timing.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanEnable (via Veneer)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanEvtHandler
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MstCreateConnPostHandler
</UL>

<P><STRONG><a name="[4d5]"></a>LL_TrackTimingConnEvt</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ll_track_timing.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TrackTimingConnEvt
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnEvtHandler
</UL>

<P><STRONG><a name="[4b9]"></a>LL_TrackTimingCodeExe</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_track_timing.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[268]"></a>RF_SetPhySpiClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_phy_spi.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_ResetCommon
</UL>

<P><STRONG><a name="[263]"></a>RF_WritePhyCfg</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, rf_phy_spi.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCritical
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetPowerLevel (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetChannel
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyResetSeq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init_from_info (via Veneer)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process (via Veneer)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyConfig (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_EnablePhy
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dcoc_in_abs_limit (via Veneer)
</UL>

<P><STRONG><a name="[255]"></a>EnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, critical.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc (via Veneer)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendEvent (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement (via Veneer)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerExpired (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerReady (via Veneer)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveItem (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveInvalidItem
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertItemToQueue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset (via Veneer)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendQueueMsg (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Enquene (via Veneer)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Dequeue (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[256]"></a>ExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, critical.o(.ramfunc))
<BR><BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartMstConnEvt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufFree (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolBufAlloc (via Veneer)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartSec (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStop (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerStartMs (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendEvent (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerSleepUpdate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_Start (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SlvAdvStart
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_RemoveElement (via Veneer)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerInsert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerExpired (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_TimerReady (via Veneer)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PushElement (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_InsertElement (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveItem (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_AddItem (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Switch
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveInvalidItem
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_InsertItemToQueue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Reset (via Veneer)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDC_SendQueueMsg (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RemoveByEx (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Enquene (via Veneer)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_Dequeue (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>

<P><STRONG><a name="[247]"></a>LL_GetPrand</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ll_csa2.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GetPrand
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitReverse8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SelectNextChanIndex (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustConnParam
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdjustDataChannelIndexEx
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[161]"></a>FMC_TrigErrorHandler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pan_fmc.o(i.FMC_TrigErrorHandler))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WritePageInternal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetFlashMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>

<P><STRONG><a name="[16a]"></a>FMC_WritePageInternal</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, pan_fmc.o(i.FMC_WritePageInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_WritePageInternal &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_TrigErrorHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteStream
</UL>

<P><STRONG><a name="[47a]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[480]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[488]"></a>prvUnlockQueue</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake (via Veneer)
</UL>

<P><STRONG><a name="[477]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[74]"></a>prvIdleTask</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvIdleTask &rArr; vApplicationUserHook &rArr; pan_update_stimer &rArr; MDC_TimerSleepUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationUserHook
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[483]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvProcessExpiredTimer &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[484]"></a>prvSampleTimeNow</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvSampleTimeNow &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[75]"></a>prvTimerTask</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[73]"></a>prvTaskExitError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[41]"></a>ble_att_rx</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ble_att.o(i.ble_att_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_att_rx &rArr; ble_att_svr_tx_error_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_conn_handle
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_tx_error_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_att.o(i.ble_att_create_chan)
</UL>
<P><STRONG><a name="[2ef]"></a>ble_att_svr_check_perms</STRONG> (Thumb, 254 bytes, Stack size 184 bytes, ble_att_svr.o(i.ble_att_svr_check_perms))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_handle
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_write_handle
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_read_flat
</UL>

<P><STRONG><a name="[2fa]"></a>ble_att_svr_read_flat</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, ble_att_svr.o(i.ble_att_svr_read_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ble_att_svr_read_flat &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
</UL>

<P><STRONG><a name="[2fe]"></a>ble_att_svr_tx_rsp</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, ble_att_svr.o(i.ble_att_svr_tx_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_att_svr_tx_rsp &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_truncate_to_mtu
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_inc_tx_stat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_conn_chan_find
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_tx
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_l2cap_pkt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_cmd_prepare
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_mult
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_group_type
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read_blob
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_prep_write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_mtu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_indicate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_type_value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_find_info
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_exec_write
</UL>

<P><STRONG><a name="[307]"></a>ble_att_svr_write_handle</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_att_svr.o(i.ble_att_svr_write_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ble_att_svr_write_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write_no_rsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_svr_rx_write
</UL>

<P><STRONG><a name="[30f]"></a>ble_gap_adv_finished</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_adv_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gap_adv_finished &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
</UL>

<P><STRONG><a name="[318]"></a>ble_gap_call_conn_event_cb</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_call_conn_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_rx_event
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mtu_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_subscribe_event
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_passkey_event
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_identity_event
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_event
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
</UL>

<P><STRONG><a name="[329]"></a>ble_gap_disc_complete</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_disc_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gap_disc_complete &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_failed
</UL>

<P><STRONG><a name="[31a]"></a>ble_gap_fill_conn_desc</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, ble_gap.o(i.ble_gap_fill_conn_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ble_gap_fill_conn_desc &rArr; ble_hs_conn_addrs &rArr; ble_hs_id_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
</UL>

<P><STRONG><a name="[331]"></a>ble_gap_master_failed</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, ble_gap.o(i.ble_gap_master_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_gap_master_failed &rArr; ble_gap_disc_complete &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_complete
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
</UL>

<P><STRONG><a name="[31b]"></a>ble_gap_update_entry_remove</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_gap.o(i.ble_gap_update_entry_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gap_update_entry_remove &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
</UL>

<P><STRONG><a name="[42]"></a>ble_gap_update_l2cap_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gap.o(i.ble_gap_update_l2cap_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gap_update_l2cap_cb &rArr; ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_notify
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_entry_remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap.o(i.ble_gap_rx_update_complete)
<LI> ble_gap.o(i.ble_gap_update_params)
</UL>
<P><STRONG><a name="[31c]"></a>ble_gap_update_notify</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, ble_gap.o(i.ble_gap_update_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_call_conn_event_cb
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_broken
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_l2cap_cb
</UL>

<P><STRONG><a name="[95]"></a>ble_gattc_disc_all_chrs_err</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_all_chrs_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ble_gattc_disc_all_chrs_resume</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_all_chrs_resume &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>ble_gattc_disc_all_chrs_rx_adata</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs_rx_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gattc_disc_all_chrs_rx_adata &rArr; ble_uuid_init_from_att_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ble_gattc_disc_all_chrs_rx_complete</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_all_chrs_rx_complete &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ble_gattc_disc_all_chrs_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_all_chrs_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_all_chrs_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[35c]"></a>ble_gattc_disc_all_dscs_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_disc_all_dscs_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_disc_all_dscs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
</UL>

<P><STRONG><a name="[97]"></a>ble_gattc_disc_all_dscs_err</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_disc_all_dscs_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_disc_all_dscs_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ble_gattc_disc_all_dscs_resume</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_all_dscs_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_all_dscs_resume &rArr; ble_att_clt_tx_find_info &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_info
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ble_gattc_disc_all_dscs_tmo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_disc_all_dscs_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_disc_all_dscs_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ble_gattc_disc_all_svcs_err</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_all_svcs_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_all_svcs_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ble_gattc_disc_all_svcs_resume</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_all_svcs_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_all_svcs_resume &rArr; ble_att_clt_tx_read_group_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_group_type
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>ble_gattc_disc_all_svcs_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_all_svcs_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_all_svcs_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[356]"></a>ble_gattc_disc_chr_uuid_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_disc_chr_uuid_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_adata
</UL>

<P><STRONG><a name="[96]"></a>ble_gattc_disc_chr_uuid_err</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_chr_uuid_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ble_gattc_disc_chr_uuid_resume</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_chr_uuid_resume &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>ble_gattc_disc_chr_uuid_rx_adata</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_rx_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gattc_disc_chr_uuid_rx_adata &rArr; ble_uuid_init_from_att_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_cmp
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_cb
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>ble_gattc_disc_chr_uuid_rx_complete</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_disc_chr_uuid_rx_complete &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ble_gattc_disc_chr_uuid_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_chr_uuid_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_chr_uuid_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ble_gattc_disc_svc_uuid_err</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_svc_uuid_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_svc_uuid_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ble_gattc_disc_svc_uuid_resume</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_disc_svc_uuid_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_gattc_disc_svc_uuid_resume &rArr; ble_att_clt_tx_find_type_value &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_find_type_value
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ble_gattc_disc_svc_uuid_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_disc_svc_uuid_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_disc_svc_uuid_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[34f]"></a>ble_gattc_extract</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_gattc_extract &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_err
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_connection_broken
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_fail_notconn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>

<P><STRONG><a name="[358]"></a>ble_gattc_find_inc_svcs_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_tmo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_adata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_err
</UL>

<P><STRONG><a name="[94]"></a>ble_gattc_find_inc_svcs_err</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_find_inc_svcs_err &rArr; ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ble_gattc_find_inc_svcs_resume</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gattc_find_inc_svcs_resume &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>ble_gattc_find_inc_svcs_rx_adata</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gattc_find_inc_svcs_rx_adata &rArr; ble_uuid_init_from_att_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ble_gattc_find_inc_svcs_rx_complete</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gattc_find_inc_svcs_rx_complete &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>ble_gattc_find_inc_svcs_rx_read_rsp</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_rx_read_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_gattc_find_inc_svcs_rx_read_rsp &rArr; ble_att_clt_tx_read_type &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_init_from_att_mbuf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_type
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>ble_gattc_find_inc_svcs_tmo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_find_inc_svcs_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_find_inc_svcs_tmo &rArr; ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ble_gattc_mtu_err</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_mtu_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_mtu_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ble_gattc_mtu_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_mtu_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_mtu_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>ble_gattc_proc_matches_conn_op</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_gattc.o(i.ble_gattc_proc_matches_conn_op))
<BR>[Address Reference Count : 14]<UL><LI> ble_gattc.o(i.ble_gattc_rx_err)
<LI> ble_gattc.o(i.ble_gattc_rx_find_info_complete)
<LI> ble_gattc.o(i.ble_gattc_rx_find_info_idata)
<LI> ble_gattc.o(i.ble_gattc_rx_find_type_value_complete)
<LI> ble_gattc.o(i.ble_gattc_rx_find_type_value_hinfo)
<LI> ble_gattc.o(i.ble_gattc_rx_mtu)
<LI> ble_gattc.o(i.ble_gattc_rx_read_blob_rsp)
<LI> ble_gattc.o(i.ble_gattc_rx_read_group_type_adata)
<LI> ble_gattc.o(i.ble_gattc_rx_read_group_type_complete)
<LI> ble_gattc.o(i.ble_gattc_rx_read_mult_rsp)
<LI> ble_gattc.o(i.ble_gattc_rx_write_rsp)
<LI> ble_gattc.o(i.ble_gatts_indicate_fail_notconn)
<LI> ble_gattc.o(i.ble_gatts_rx_indicate_rsp)
<LI> ble_gattc.o(i.ble_gattc_connection_broken)
</UL>
<P><STRONG><a name="[44]"></a>ble_gattc_proc_matches_conn_rx_entry</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_proc_matches_conn_rx_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_proc_matches_conn_rx_entry
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ble_gattc.o(i.ble_gattc_rx_exec_write_rsp)
<LI> ble_gattc.o(i.ble_gattc_rx_prep_write_rsp)
<LI> ble_gattc.o(i.ble_gattc_rx_read_rsp)
<LI> ble_gattc.o(i.ble_gattc_rx_read_type_adata)
<LI> ble_gattc.o(i.ble_gattc_rx_read_type_complete)
</UL>
<P><STRONG><a name="[45]"></a>ble_gattc_proc_matches_expired</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_gattc.o(i.ble_gattc_proc_matches_expired))
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(i.ble_gattc_timer)
</UL>
<P><STRONG><a name="[46]"></a>ble_gattc_proc_matches_stalled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_gattc.o(i.ble_gattc_proc_matches_stalled))
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(i.ble_gattc_timer)
</UL>
<P><STRONG><a name="[352]"></a>ble_gattc_process_resume_status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_process_resume_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_process_resume_status
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_rx_read_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_long_resume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_read_rsp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_rx_complete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_find_inc_svcs_resume
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_svc_uuid_resume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_rx_complete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_chr_uuid_resume
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs_resume
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs_resume
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_rx_complete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs_resume
</UL>

<P><STRONG><a name="[351]"></a>ble_gattc_process_status</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_process_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_resched
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_rsp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_write_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_complete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_type_adata
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_rsp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_mult_rsp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_complete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_group_type_adata
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_prep_write_rsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_mtu
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_hinfo
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_type_value_complete
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_idata
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_find_info_complete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_exec_write_rsp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_indicate_custom
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_svcs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
</UL>

<P><STRONG><a name="[98]"></a>ble_gattc_read_err</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ble_gattc_read_long_err</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_long_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_long_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ble_gattc_read_long_resume</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_read_long_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gattc_read_long_resume &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>ble_gattc_read_long_rx_read_rsp</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ble_gattc.o(i.ble_gattc_read_long_rx_read_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_gattc_read_long_rx_read_rsp &rArr; ble_att_clt_tx_read_blob &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read_blob
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_rx_read_blob_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>ble_gattc_read_long_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_long_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_long_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ble_gattc_read_mult_err</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_read_mult_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_read_mult_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ble_gattc_read_mult_tmo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_read_mult_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_read_mult_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>ble_gattc_read_rx_read_rsp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_read_rx_read_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_read_rx_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ble_gattc_read_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ble_gattc_read_uuid_err</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_uuid_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_uuid_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ble_gattc_read_uuid_rx_adata</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_read_uuid_rx_adata))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_gattc_read_uuid_rx_adata &rArr; ble_hs_mbuf_from_flat &rArr; os_mbuf_copyinto &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>ble_gattc_read_uuid_rx_complete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_read_uuid_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_read_uuid_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ble_gattc_read_uuid_tmo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_read_uuid_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_uuid_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ble_gattc_write_err</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_write_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ble_gattc_write_long_err</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_write_long_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_gattc_write_long_err &rArr; ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ble_gattc_write_long_resume</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_write_long_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gattc_write_long_resume &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_rx_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ble_gattc_write_long_rx_exec</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_write_long_rx_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_write_long_rx_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>ble_gattc_write_long_rx_prep</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_long_rx_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_gattc_write_long_rx_prep &rArr; ble_gattc_write_long_resume &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_long_resume
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>ble_gattc_write_long_tmo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gattc_write_long_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_write_long_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ble_gattc_write_reliable_err</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_reliable_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_gattc_write_reliable_err &rArr; ble_att_clt_tx_exec_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>ble_gattc_write_reliable_resume</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_reliable_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gattc_write_reliable_resume &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_mtu
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_prep_write
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_process_resume_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_rx_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>ble_gattc_write_reliable_rx_exec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_write_reliable_rx_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_write_reliable_rx_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>ble_gattc_write_reliable_rx_prep</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_reliable_rx_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ble_gattc_write_reliable_rx_prep &rArr; ble_gattc_write_reliable_resume &rArr; ble_att_clt_tx_prep_write &rArr; ble_att_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_clt_tx_exec_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_reliable_resume
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_cmpm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ble_gattc_write_reliable_tmo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gattc_write_reliable_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gattc_write_reliable_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>ble_gattc_write_tmo</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gattc.o(i.ble_gattc_write_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gattc_write_tmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ble_gatts_indicate_err</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_gattc.o(i.ble_gatts_indicate_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ble_gatts_indicate_err &rArr; ble_gatts_send_next_indicate &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_send_next_indicate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rx_indicate_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ble_gatts_indicate_tmo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_gattc.o(i.ble_gatts_indicate_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_gatts_indicate_tmo &rArr; ble_gap_notify_tx_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_notify_tx_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>ble_gatts_chr_def_access</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_chr_def_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gatts_chr_def_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[4a]"></a>ble_gatts_chr_val_access</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, ble_gatts.o(i.ble_gatts_chr_val_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_gatts_chr_val_access &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[4c]"></a>ble_gatts_dsc_access</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, ble_gatts.o(i.ble_gatts_dsc_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_gatts_dsc_access &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_appendfrom
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_att_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[48]"></a>ble_gatts_inc_access</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_inc_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gatts_inc_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[47]"></a>ble_gatts_svc_access</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_gatts.o(i.ble_gatts_svc_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gatts_svc_access &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_length
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts.o(i.ble_gatts_register_svcs)
</UL>
<P><STRONG><a name="[51]"></a>ble_hs_event_reset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ble_hs.o(i.ble_hs_event_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ble_hs_event_reset &rArr; ble_gap_reset_state &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_reset
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[55]"></a>ble_hs_event_rx_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_event_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_hs_event_rx_data &rArr; ble_hs_hci_evt_acl_process &rArr; ble_l2cap_rx &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_acl_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[4e]"></a>ble_hs_event_rx_hci_ev</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_event_rx_hci_ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_hs_event_rx_hci_ev &rArr; ble_hs_hci_evt_process &rArr; ble_transport_free &rArr; os_memblock_from &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_evt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_enqueue_hci_event)
</UL>
<P><STRONG><a name="[52]"></a>ble_hs_event_start_stage1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_event_start_stage1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hs_event_start_stage1 &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[53]"></a>ble_hs_event_start_stage2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_event_start_stage2))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ble_hs_event_start_stage2 &rArr; ble_hs_start &rArr; ble_hs_misc_restore_irks &rArr; ble_store_iterate &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[50]"></a>ble_hs_event_tx_notify</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_hs.o(i.ble_hs_event_tx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ble_hs_event_tx_notify &rArr; ble_gatts_tx_notifications &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_tx_notifications
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_init)
</UL>
<P><STRONG><a name="[57]"></a>ble_hs_timer_exp</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ble_hs.o(i.ble_hs_timer_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ble_hs_timer_exp &rArr; ble_gap_reset_state &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_timer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_reset_state
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_timer
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mqueue_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_timer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_startup_go
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_restore_irks
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_timer
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_sched
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs.o(i.ble_hs_start)
</UL>
<P><STRONG><a name="[38f]"></a>ble_hs_timer_sched</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_hs.o(i.ble_hs_timer_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_hs_timer_sched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_timer_exp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_event_reset
</UL>

<P><STRONG><a name="[29a]"></a>adv_set_fields</STRONG> (Thumb, 914 bytes, Stack size 88 bytes, ble_hs_adv.o(i.adv_set_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_flat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le32
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_to_mbuf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_read_adv_tx_pwr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_fields
</UL>

<P><STRONG><a name="[29b]"></a>ble_hs_adv_set_flat_mbuf</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, ble_hs_adv.o(i.ble_hs_adv_set_flat_mbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_hs_adv_set_flat_mbuf &rArr; ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_hdr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[29c]"></a>ble_hs_adv_set_hdr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_hs_adv.o(i.ble_hs_adv_set_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_hs_adv_set_hdr &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_set_flat_mbuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_fields
</UL>

<P><STRONG><a name="[4d]"></a>find_field_func</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_hs_adv.o(i.find_field_func))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_adv.o(i.ble_hs_adv_find_field)
</UL>
<P><STRONG><a name="[4f]"></a>ble_hs_hci_frag_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_hs_hci.o(i.ble_hs_hci_frag_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hs_hci_frag_alloc &rArr; ble_hs_mbuf_acl_pkt &rArr; os_msys_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_acl_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci.o(i.ble_hs_hci_acl_tx_now)
</UL>
<P><STRONG><a name="[c9]"></a>ble_hs_hci_evt_disconn_complete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_disconn_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ble_hs_hci_evt_disconn_complete &rArr; ble_gap_rx_disconn_complete &rArr; ble_gap_conn_broken &rArr; ble_sm_connection_broken &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_disconn_complete
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>ble_hs_hci_evt_enc_key_refresh</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_enc_key_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ble_hs_hci_evt_enc_key_refresh &rArr; ble_sm_enc_key_refresh_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_key_refresh_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>ble_hs_hci_evt_encrypt_change</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_encrypt_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ble_hs_hci_evt_encrypt_change &rArr; ble_sm_enc_change_rx &rArr; ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_change_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ble_hs_hci_evt_hw_error</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_hw_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_hs_hci_evt_hw_error &rArr; ble_hs_hw_error &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hw_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>ble_hs_hci_evt_le_adv_rpt</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_adv_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_hs_hci_evt_le_adv_rpt &rArr; ble_gap_rx_adv_report &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>ble_hs_hci_evt_le_adv_set_terminated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_adv_set_terminated))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>ble_hs_hci_evt_le_conn_complete</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ble_hs_hci_evt_le_conn_complete &rArr; ble_gap_rx_conn_complete &rArr; ble_gap_master_failed &rArr; ble_gap_disc_complete &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>ble_hs_hci_evt_le_conn_parm_req</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_parm_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ble_hs_hci_evt_le_conn_parm_req &rArr; ble_gap_rx_param_req &rArr; ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_param_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>ble_hs_hci_evt_le_conn_upd_complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_conn_upd_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_hs_hci_evt_le_conn_upd_complete &rArr; ble_gap_rx_update_complete &rArr; ble_gap_update_notify &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_update_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>ble_hs_hci_evt_le_dir_adv_rpt</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_dir_adv_rpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_hs_hci_evt_le_dir_adv_rpt &rArr; ble_gap_rx_adv_report &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_adv_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>ble_hs_hci_evt_le_enh_conn_complete</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_enh_conn_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ble_hs_hci_evt_le_enh_conn_complete &rArr; ble_gap_rx_conn_complete &rArr; ble_gap_master_failed &rArr; ble_gap_disc_complete &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_conn_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ble_hs_hci_evt_le_ext_adv_rpt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_ext_adv_rpt))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>ble_hs_hci_evt_le_lt_key_req</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_lt_key_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ble_hs_hci_evt_le_lt_key_req &rArr; ble_sm_ltk_req_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_ltk_req_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>ble_hs_hci_evt_le_meta</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_meta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_hci_evt_le_meta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>ble_hs_hci_evt_le_periodic_adv_rpt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_rpt))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>ble_hs_hci_evt_le_periodic_adv_sync_estab</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_estab))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>ble_hs_hci_evt_le_periodic_adv_sync_lost</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_lost))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>ble_hs_hci_evt_le_periodic_adv_sync_transfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_periodic_adv_sync_transfer))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ble_hs_hci_evt_le_phy_update_complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_phy_update_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_hs_hci_evt_le_phy_update_complete &rArr; ble_gap_rx_phy_update_complete &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_phy_update_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ble_hs_hci_evt_le_rd_rem_used_feat_complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_rd_rem_used_feat_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_hs_hci_evt_le_rd_rem_used_feat_complete &rArr; ble_gap_rx_rd_rem_sup_feat_complete &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_rd_rem_sup_feat_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>ble_hs_hci_evt_le_scan_req_rcvd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_scan_req_rcvd))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>ble_hs_hci_evt_le_scan_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_le_scan_timeout))
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>ble_hs_hci_evt_num_completed_pkts</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_hs_hci_evt.o(i.ble_hs_hci_evt_num_completed_pkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_hs_hci_evt_num_completed_pkts &rArr; ble_hs_hci_add_avail_pkts &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_add_avail_pkts
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_wakeup_tx
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_sched_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_hci_evt.o(.constdata)
</UL>
<P><STRONG><a name="[3b6]"></a>ble_hs_id_addr_type_usable</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ble_hs_id.o(i.ble_hs_id_addr_type_usable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_hs_id_addr_type_usable &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_own_addr_type_to_id
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_use_addr
</UL>

<P><STRONG><a name="[56]"></a>ble_hs_misc_restore_one_irk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_hs_misc.o(i.ble_hs_misc_restore_one_irk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_hs_misc_restore_one_irk
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_add_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_misc.o(i.ble_hs_misc_restore_irks)
</UL>
<P><STRONG><a name="[58]"></a>ble_hs_stop_terminate_timeout_cb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_hs_stop.o(i.ble_hs_stop_terminate_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_hs_stop_terminate_timeout_cb &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_event_listener_unregister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hs_stop.o(i.ble_hs_stop_init)
</UL>
<P><STRONG><a name="[59]"></a>ble_l2cap_sig_rx</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_l2cap_sig_rx &rArr; ble_l2cap_sig_reject_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_log_mbuf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_reject_tx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_hdr_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(i.ble_l2cap_sig_create_chan)
</UL>
<P><STRONG><a name="[df]"></a>ble_l2cap_sig_rx_noop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_rx_noop))
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ble_l2cap_sig_rx_reject</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_rx_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_l2cap_sig_rx_reject &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>ble_l2cap_sig_update_req_rx</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_update_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ble_l2cap_sig_update_req_rx &rArr; ble_gap_update_params &rArr; ble_l2cap_sig_update &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_atomic_conn_flags
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_update_params
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rx_l2cap_update_req
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_sig_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ble_l2cap_sig_update_rsp_rx</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, ble_l2cap_sig.o(i.ble_l2cap_sig_update_rsp_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_l2cap_sig_update_rsp_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_sig.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>ble_sm_confirm_exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_confirm_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ble_sm_confirm_exec &rArr; ble_sm_sc_confirm_exec &rArr; ble_sm_alg_f4 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_confirm_exec
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_confirm_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ble_sm_confirm_rx</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_confirm_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_confirm_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[405]"></a>ble_sm_enc_event_rx</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, ble_sm.o(i.ble_sm_enc_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = ble_sm_enc_event_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_key_refresh_rx
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_change_rx
</UL>

<P><STRONG><a name="[e7]"></a>ble_sm_enc_info_rx</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_enc_info_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_enc_info_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>ble_sm_enc_restore_exec</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ble_sm.o(i.ble_sm_enc_restore_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_sm_enc_restore_exec &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ble_sm_enc_start_exec</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, ble_sm.o(i.ble_sm_enc_start_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_sm_enc_start_exec &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ble_sm_fail_rx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_sm.o(i.ble_sm_fail_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_sm_fail_rx &rArr; ble_hs_mbuf_pullup_base &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[408]"></a>ble_sm_fill_store_value</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ble_sm.o(i.ble_sm_fill_store_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_sm_fill_store_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>

<P><STRONG><a name="[ea]"></a>ble_sm_id_addr_info_rx</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_id_addr_info_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_id_addr_info_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ble_sm_id_info_rx</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_id_info_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_id_info_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ble_sm_key_exch_exec</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, ble_sm.o(i.ble_sm_key_exch_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_sm_key_exch_exec &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_pvcy_our_irk
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[406]"></a>ble_sm_key_rxed</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_key_rxed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sm_key_rxed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sign_info_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_master_id_rx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_info_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_id_addr_info_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_info_rx
</UL>

<P><STRONG><a name="[f4]"></a>ble_sm_ltk_restore_exec</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ble_sm.o(i.ble_sm_ltk_restore_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_sm_ltk_restore_exec &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>ble_sm_ltk_start_exec</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ble_sm.o(i.ble_sm_ltk_start_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_sm_ltk_start_exec &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_cmd_tx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ble_sm_master_id_rx</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ble_sm.o(i.ble_sm_master_id_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_sm_master_id_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[416]"></a>ble_sm_pair_cfg</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_pair_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_sm_pair_cfg &rArr; ble_sm_lgcy_io_action
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_rsp_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_req_rx
</UL>

<P><STRONG><a name="[f0]"></a>ble_sm_pair_exec</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ble_sm.o(i.ble_sm_pair_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_sm_pair_exec &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>ble_sm_pair_req_rx</STRONG> (Thumb, 538 bytes, Stack size 216 bytes, ble_sm.o(i.ble_sm_pair_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ble_sm_pair_req_rx &rArr; ble_gap_repeat_pairing_event &rArr; ble_gap_call_conn_event_cb &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_repeat_pairing_event
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ble_sm_pair_rsp_rx</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_pair_rsp_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_pair_rsp_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_io_action
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_io_action
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_can_advance
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ble_sm_random_exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_sm.o(i.ble_sm_random_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ble_sm_random_exec &rArr; ble_sm_sc_random_exec &rArr; ble_sm_alg_g2 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_exec
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ble_sm_random_rx</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_random_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ble_sm_random_rx &rArr; ble_sm_sc_random_rx &rArr; ble_sm_alg_f5 &rArr; ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_sc_random_rx
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_lgcy_random_rx
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ble_sm_rx</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_sm.o(i.ble_sm_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ble_sm_rx &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_get_conn_handle
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_process_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(i.ble_sm_create_chan)
</UL>
<P><STRONG><a name="[ef]"></a>ble_sm_rx_noop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_sm.o(i.ble_sm_rx_noop))
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ble_sm_sec_req_exec</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_sm.o(i.ble_sm_sec_req_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_sm_sec_req_exec &rArr; ble_sm_tx &rArr; ble_l2cap_tx &rArr; ble_hs_hci_acl_tx &rArr; ble_hs_hci_acl_tx_now &rArr; mem_split_frag &rArr; os_mbuf_appendfrom &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_tx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>ble_sm_sec_req_rx</STRONG> (Thumb, 190 bytes, Stack size 176 bytes, ble_sm.o(i.ble_sm_sec_req_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ble_sm_sec_req_rx &rArr; ble_sm_enc_initiate &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_read_peer_sec
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_find_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_conn_addrs
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_pair_initiate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_enc_initiate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ble_sm_sign_info_rx</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ble_sm.o(i.ble_sm_sign_info_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_sm_sign_info_rx &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_pullup_base
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_proc_find
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_key_rxed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm.o(.constdata)
</UL>
<P><STRONG><a name="[3e6]"></a>ble_sm_alg_aes_cmac</STRONG> (Thumb, 62 bytes, Stack size 280 bytes, ble_sm_alg.o(i.ble_sm_alg_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ble_sm_alg_aes_cmac &rArr; tc_cmac_update &rArr; tc_aes_encrypt &rArr; _copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_g2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f6
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f5
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_f4
</UL>

<P><STRONG><a name="[5a]"></a>ble_sm_alg_rand</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_sm_alg.o(i.ble_sm_alg_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_sm_alg_rand &rArr; ble_hs_hci_util_rand &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_hci_util_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm_alg.o(i.ble_sm_alg_ecc_init)
</UL>
<P><STRONG><a name="[60]"></a>ble_store_util_iter_unique_peer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_store_util.o(i.ble_store_util_iter_unique_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_store_util_iter_unique_peer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_util.o(i.ble_store_util_bonded_peers)
</UL>
<P><STRONG><a name="[15b]"></a>XYcZ_addC</STRONG> (Thumb, 546 bytes, Stack size 224 bytes, ecc.o(i.XYcZ_addC))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = XYcZ_addC &rArr; uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[155]"></a>uECC_vli_add</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, ecc.o(i.uECC_vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[15e]"></a>uECC_vli_mult</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, ecc.o(i.uECC_vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uECC_vli_mult &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>

<P><STRONG><a name="[442]"></a>uECC_vli_rshift1</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ecc.o(i.uECC_vli_rshift1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uECC_vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
</UL>

<P><STRONG><a name="[6f]"></a>os_callout_timer_cb</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, npl_os_freertos.o(i.os_callout_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_callout_timer_cb &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npl_os_freertos.o(i.npl_freertos_callout_init)
</UL>
<P><STRONG><a name="[61]"></a>ble_transport_acl_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, transport.o(i.ble_transport_acl_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_transport_acl_put &rArr; os_memblock_put_from_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(i.ble_transport_init)
</UL>
<P><STRONG><a name="[0]"></a>mem_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nimble_glue_spark.o(i.mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_alloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nimble_glue_spark.o(.data)
</UL>
<P><STRONG><a name="[289]"></a>_mtb_kvstore_buffered_write</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, mtb_kvstore.o(i._mtb_kvstore_buffered_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
</UL>

<P><STRONG><a name="[28a]"></a>_mtb_kvstore_find_record_in_ram_table</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, mtb_kvstore.o(i._mtb_kvstore_find_record_in_ram_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mtb_kvstore_find_record_in_ram_table &rArr; _mtb_kvstore_read_record &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_crc16
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_read_record
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[28e]"></a>_mtb_kvstore_garbage_collection</STRONG> (Thumb, 550 bytes, Stack size 104 bytes, mtb_kvstore.o(i._mtb_kvstore_garbage_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _mtb_kvstore_garbage_collection &rArr; _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_update_ram_table
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[28d]"></a>_mtb_kvstore_read_record</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, mtb_kvstore.o(i._mtb_kvstore_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mtb_kvstore_read_record &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_crc16
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_find_record_in_ram_table
</UL>

<P><STRONG><a name="[291]"></a>_mtb_kvstore_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mtb_kvstore.o(i._mtb_kvstore_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _mtb_kvstore_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
</UL>

<P><STRONG><a name="[290]"></a>_mtb_kvstore_update_ram_table</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mtb_kvstore.o(i._mtb_kvstore_update_ram_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mtb_kvstore_update_ram_table &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_write_record
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_garbage_collection
</UL>

<P><STRONG><a name="[28f]"></a>_mtb_kvstore_write_record</STRONG> (Thumb, 462 bytes, Stack size 88 bytes, mtb_kvstore.o(i._mtb_kvstore_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mtb_kvstore_write_record &rArr; _mtb_kvstore_buffered_write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_crc16
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_update_ram_table
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_buffered_write
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_kvstore_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mtb_kvstore_garbage_collection
</UL>

<P><STRONG><a name="[3]"></a>bd_erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mtb_init.o(i.bd_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bd_erase &rArr; FMC_EraseCodeArea &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseCodeArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>bd_erase_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtb_init.o(i.bd_erase_size))
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>bd_program</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mtb_init.o(i.bd_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bd_program &rArr; FMC_WriteStream &rArr; FMC_WritePageInternal &rArr; FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>bd_program_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtb_init.o(i.bd_program_size))
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>bd_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mtb_init.o(i.bd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bd_read &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>bd_read_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mtb_init.o(i.bd_read_size))
<BR>[Address Reference Count : 1]<UL><LI> mtb_init.o(.data)
</UL>
<P><STRONG><a name="[421]"></a>ble_store_config_find_cccd</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ble_store_config.o(i.ble_store_config_find_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_store_config_find_cccd &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_delete
</UL>

<P><STRONG><a name="[41f]"></a>ble_store_config_find_sec</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ble_store_config.o(i.ble_store_config_find_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ble_store_config_find_sec &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_delete
</UL>

<P><STRONG><a name="[423]"></a>ble_store_config_print_value_sec</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ble_store_config.o(i.ble_store_config_print_value_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_store_config_print_value_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
</UL>

<P><STRONG><a name="[5f]"></a>ble_store_util_iter_replace_mac</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_store_config.o(i.ble_store_util_iter_replace_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_store_util_iter_replace_mac &rArr; ble_store_config_write &rArr; ble_store_config_print_value_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_misc_peer_addr_type_to_id
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_config_write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_store_config.o(i.ble_store_iterate_replace_cccd)
</UL>
<P><STRONG><a name="[62]"></a>blecent_gap_event</STRONG> (Thumb, 508 bytes, Stack size 288 bytes, main.o(i.blecent_gap_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = blecent_gap_event &rArr; blecent_scan &rArr; ble_gap_disc &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_store_util_delete_peer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_find
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_adv_parse_fields
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_id_infer_auto
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_conn_desc
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_all
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_delete
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_add
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_printf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_str
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGT_SendMultiData
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_scan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.blecent_gap_event)
<LI> main.o(i.blecent_scan)
</UL>
<P><STRONG><a name="[63]"></a>blecent_on_disc_complete</STRONG> (Thumb, 314 bytes, Stack size 160 bytes, main.o(i.blecent_on_disc_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = blecent_on_disc_complete &rArr; ble_gattc_read &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_flat
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_dsc_find_uuid
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_chr_find_uuid
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGT_SendMultiData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.blecent_gap_event)
</UL>
<P><STRONG><a name="[64]"></a>blecent_on_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.blecent_on_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blecent_on_read &rArr; print_mbuf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mbuf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.blecent_on_disc_complete)
</UL>
<P><STRONG><a name="[3d]"></a>blecent_on_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.blecent_on_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blecent_on_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_init)
</UL>
<P><STRONG><a name="[66]"></a>blecent_on_subscribe</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.blecent_on_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blecent_on_subscribe &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.blecent_on_disc_complete)
</UL>
<P><STRONG><a name="[3e]"></a>blecent_on_sync</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.blecent_on_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = blecent_on_sync &rArr; blehr_advertise &rArr; ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_util_ensure_addr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_init)
</UL>
<P><STRONG><a name="[65]"></a>blecent_on_write</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.blecent_on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blecent_on_write &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.blecent_on_disc_complete)
<LI> main.o(i.central_write)
</UL>
<P><STRONG><a name="[439]"></a>blehr_advertise</STRONG> (Thumb, 152 bytes, Stack size 152 bytes, main.o(i.blehr_advertise))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = blehr_advertise &rArr; ble_gap_adv_set_fields &rArr; ble_hs_adv_set_fields &rArr; adv_set_fields &rArr; ble_hs_hci_util_read_adv_tx_pwr &rArr; ble_hs_hci_cmd_tx &rArr; ble_hs_sched_reset &rArr; npl_freertos_eventq_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_att_set_preferred_mtu
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_fields
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleph_gap_event
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blecent_on_sync
</UL>

<P><STRONG><a name="[40]"></a>blehr_tx_hrate</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.blehr_tx_hrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = blehr_tx_hrate &rArr; ble_gatts_notify_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hs_mbuf_from_flat
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_notify_custom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_init)
</UL>
<P><STRONG><a name="[67]"></a>bleph_gap_event</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, main.o(i.bleph_gap_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = bleph_gap_event &rArr; ble_sm_inject_io &rArr; ble_sm_process_result &rArr; ble_gap_enc_event &rArr; ble_gatts_bonding_restored &rArr; ble_gatts_indicate &rArr; ble_gatts_indicate_custom &rArr; ble_att_svr_read_handle &rArr; ble_att_svr_check_perms &rArr; ble_store_read_peer_sec &rArr; ble_hs_unlock &rArr; npl_freertos_mutex_release &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_inject_io
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blehr_advertise
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.blehr_advertise)
</UL>
<P><STRONG><a name="[68]"></a>btshell_on_mtu</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.btshell_on_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btshell_on_mtu &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.bleph_gap_event)
</UL>
<P><STRONG><a name="[71]"></a>peer_chr_disced</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, peer.o(i.peer_chr_disced))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = peer_chr_disced &rArr; peer_disc_chrs &rArr; ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_chrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer.o(i.peer_disc_chrs)
</UL>
<P><STRONG><a name="[470]"></a>peer_disc_chrs</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, peer.o(i.peer_disc_chrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = peer_disc_chrs &rArr; ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_chrs
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_svc_disced
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_chr_disced
</UL>

<P><STRONG><a name="[471]"></a>peer_disc_dscs</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, peer.o(i.peer_disc_dscs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = peer_disc_dscs &rArr; ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_disc_all_dscs
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_dsc_disced
</UL>

<P><STRONG><a name="[72]"></a>peer_dsc_disced</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, peer.o(i.peer_dsc_disced))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = peer_dsc_disced &rArr; peer_disc_dscs &rArr; ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_dscs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> peer.o(i.peer_disc_chrs)
<LI> peer.o(i.peer_disc_dscs)
</UL>
<P><STRONG><a name="[70]"></a>peer_svc_disced</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, peer.o(i.peer_svc_disced))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = peer_svc_disced &rArr; peer_disc_chrs &rArr; ble_gattc_disc_all_dscs &rArr; ble_gattc_process_status &rArr; ble_hs_timer_resched &rArr; npl_freertos_callout_reset &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_disc_chrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer.o(i.peer_disc_all)
</UL>
<P><STRONG><a name="[7]"></a>gatt_svr_chr_access_heart_rate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_svr.o(i.gatt_svr_chr_access_heart_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gatt_svr_chr_access_heart_rate &rArr; os_mbuf_append &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_u16
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_svr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>gatt_svr_chr_access_uart_read_write</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, gatt_svr.o(i.gatt_svr_chr_access_uart_read_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gatt_svr_chr_access_uart_read_write &rArr; os_mbuf_copydata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_copydata
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGT_SendMultiData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_svr.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LL_SlvConnEvtHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_conn_slv.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LL_SlvConnEvtHandler &rArr; LL_StopSlvConnEvt &rArr; LL_ConnEvtStopHandler &rArr; LL_AdjustConnParam &rArr; LL_NotifyDataLenChangeCmpl &rArr; LL_SendQueueMsg &rArr; MDC_SendQueueMsg &rArr; MsgEnqueue &rArr; QUEUE_Enquene
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StopSlvConnEvt (via Veneer)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartSlvConnEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_conn_slv.o(i.LL_SlvInit)
</UL>
<P><STRONG><a name="[269]"></a>RF_PhyCfgTimeInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, rf_phy.o(i.RF_PhyCfgTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_PhyCfgTimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PhyInit
</UL>

<P><STRONG><a name="[35]"></a>LL_ScanEvtHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ll_scan.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LL_ScanEvtHandler &rArr; LL_NewTxPowerReqHandler &rArr; BB_SetTxPower &rArr; RF_SetPowerLevel &rArr; info_read_from_type &rArr; FMC_ReadInfoArea &rArr; FMC_ReadStream &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_NewTxPowerReqHandler (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BB_Reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TrackTimingScan
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ScanStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_scan.o(i.LL_MstScanInit)
</UL>
<P><STRONG><a name="[43b]"></a>check_dcoc_in_abs_limit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, rf_misc.o(i.check_dcoc_in_abs_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_dcoc_in_abs_limit &rArr; RF_WritePhyCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WritePhyCfg (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcoc_calibration_process
</UL>

<P><STRONG><a name="[287]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[280]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[295]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[294]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[3a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[285]"></a>internal_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[119]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
